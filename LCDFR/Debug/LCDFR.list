
LCDFR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000594c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005a5c  08005a5c  00015a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b30  08005b30  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08005b30  08005b30  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b30  08005b30  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b30  08005b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b34  08005b34  00015b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08005b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000111c  20000034  08005b6c  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001150  08005b6c  00021150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016705  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000324a  00000000  00000000  00036762  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001558  00000000  00000000  000399b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013f0  00000000  00000000  0003af08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ca7  00000000  00000000  0003c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001053f  00000000  00000000  00052f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080b66  00000000  00000000  000634de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4044  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000594c  00000000  00000000  000e40c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000034 	.word	0x20000034
 800012c:	00000000 	.word	0x00000000
 8000130:	08005a44 	.word	0x08005a44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000038 	.word	0x20000038
 800014c:	08005a44 	.word	0x08005a44

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000050 	.word	0x20000050
 800017c:	200000a4 	.word	0x200000a4

08000180 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b086      	sub	sp, #24
 8000184:	af02      	add	r7, sp, #8
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	f023 030f 	bic.w	r3, r3, #15
 8000190:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	011b      	lsls	r3, r3, #4
 8000196:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000198:	7bfb      	ldrb	r3, [r7, #15]
 800019a:	f043 030c 	orr.w	r3, r3, #12
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80001a2:	7bfb      	ldrb	r3, [r7, #15]
 80001a4:	f043 0308 	orr.w	r3, r3, #8
 80001a8:	b2db      	uxtb	r3, r3
 80001aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80001ac:	7bbb      	ldrb	r3, [r7, #14]
 80001ae:	f043 030c 	orr.w	r3, r3, #12
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80001b6:	7bbb      	ldrb	r3, [r7, #14]
 80001b8:	f043 0308 	orr.w	r3, r3, #8
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001c0:	f107 0208 	add.w	r2, r7, #8
 80001c4:	2364      	movs	r3, #100	; 0x64
 80001c6:	9300      	str	r3, [sp, #0]
 80001c8:	2304      	movs	r3, #4
 80001ca:	214e      	movs	r1, #78	; 0x4e
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <lcd_send_cmd+0x5c>)
 80001ce:	f001 fec7 	bl	8001f60 <HAL_I2C_Master_Transmit>
}
 80001d2:	bf00      	nop
 80001d4:	3710      	adds	r7, #16
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20000ff0 	.word	0x20000ff0

080001e0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b086      	sub	sp, #24
 80001e4:	af02      	add	r7, sp, #8
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f023 030f 	bic.w	r3, r3, #15
 80001f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	011b      	lsls	r3, r3, #4
 80001f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001f8:	7bfb      	ldrb	r3, [r7, #15]
 80001fa:	f043 030d 	orr.w	r3, r3, #13
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000202:	7bfb      	ldrb	r3, [r7, #15]
 8000204:	f043 0309 	orr.w	r3, r3, #9
 8000208:	b2db      	uxtb	r3, r3
 800020a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	f043 030d 	orr.w	r3, r3, #13
 8000212:	b2db      	uxtb	r3, r3
 8000214:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000216:	7bbb      	ldrb	r3, [r7, #14]
 8000218:	f043 0309 	orr.w	r3, r3, #9
 800021c:	b2db      	uxtb	r3, r3
 800021e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000220:	f107 0208 	add.w	r2, r7, #8
 8000224:	2364      	movs	r3, #100	; 0x64
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	2304      	movs	r3, #4
 800022a:	214e      	movs	r1, #78	; 0x4e
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <lcd_send_data+0x5c>)
 800022e:	f001 fe97 	bl	8001f60 <HAL_I2C_Master_Transmit>
}
 8000232:	bf00      	nop
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000ff0 	.word	0x20000ff0

08000240 <lcd_init>:
		lcd_send_data (' ');
	}
}

void lcd_init (void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000244:	2002      	movs	r0, #2
 8000246:	f7ff ff9b 	bl	8000180 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800024a:	2028      	movs	r0, #40	; 0x28
 800024c:	f7ff ff98 	bl	8000180 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000250:	200c      	movs	r0, #12
 8000252:	f7ff ff95 	bl	8000180 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000256:	2080      	movs	r0, #128	; 0x80
 8000258:	f7ff ff92 	bl	8000180 <lcd_send_cmd>
}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}

08000260 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000268:	e006      	b.n	8000278 <lcd_send_string+0x18>
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	1c5a      	adds	r2, r3, #1
 800026e:	607a      	str	r2, [r7, #4]
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	4618      	mov	r0, r3
 8000274:	f7ff ffb4 	bl	80001e0 <lcd_send_data>
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d1f4      	bne.n	800026a <lcd_send_string+0xa>
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <main>:
uint32_t value[1];
uint8_t data[]="Temp:    ,LEDMAX:    ,LEDMIN:    \r\n";


int main(void)
{
 8000288:	b5b0      	push	{r4, r5, r7, lr}
 800028a:	b098      	sub	sp, #96	; 0x60
 800028c:	af00      	add	r7, sp, #0

  SystemClock_Config();
 800028e:	f000 f869 	bl	8000364 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000292:	f000 f971 	bl	8000578 <MX_GPIO_Init>
  MX_DMA_Init();
 8000296:	f000 f951 	bl	800053c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800029a:	f000 f925 	bl	80004e8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800029e:	f000 f8b7 	bl	8000410 <MX_ADC1_Init>
  MX_I2C1_Init();
 80002a2:	f000 f8f3 	bl	800048c <MX_I2C1_Init>

  lcd_init();
 80002a6:	f7ff ffcb 	bl	8000240 <lcd_init>

  HAL_ADC_Start_DMA(&hadc1, value, 1);
 80002aa:	2201      	movs	r2, #1
 80002ac:	4924      	ldr	r1, [pc, #144]	; (8000340 <main+0xb8>)
 80002ae:	4825      	ldr	r0, [pc, #148]	; (8000344 <main+0xbc>)
 80002b0:	f000 fe22 	bl	8000ef8 <HAL_ADC_Start_DMA>

  /* Create the mutex(es) */
  /* definition and creation of uartMutex */
  osMutexDef(uartMutex);
 80002b4:	2300      	movs	r3, #0
 80002b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80002b8:	2300      	movs	r3, #0
 80002ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  uartMutexHandle = osMutexCreate(osMutex(uartMutex));
 80002bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002c0:	4618      	mov	r0, r3
 80002c2:	f003 fac9 	bl	8003858 <osMutexCreate>
 80002c6:	4602      	mov	r2, r0
 80002c8:	4b1f      	ldr	r3, [pc, #124]	; (8000348 <main+0xc0>)
 80002ca:	601a      	str	r2, [r3, #0]

  /* Create the thread(s) */
  /* definition and creation of TaskTemp */
  osThreadDef(TaskTemp, TaskTemp_init, osPriorityNormal, 0, 128);
 80002cc:	4b1f      	ldr	r3, [pc, #124]	; (800034c <main+0xc4>)
 80002ce:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80002d2:	461d      	mov	r5, r3
 80002d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTempHandle = osThreadCreate(osThread(TaskTemp), NULL);
 80002e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f003 fa56 	bl	8003798 <osThreadCreate>
 80002ec:	4602      	mov	r2, r0
 80002ee:	4b18      	ldr	r3, [pc, #96]	; (8000350 <main+0xc8>)
 80002f0:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task_Toggle */
  osThreadDef(Task_Toggle, Task_Toggle_init, osPriorityNormal, 0, 128);
 80002f2:	4b18      	ldr	r3, [pc, #96]	; (8000354 <main+0xcc>)
 80002f4:	f107 0420 	add.w	r4, r7, #32
 80002f8:	461d      	mov	r5, r3
 80002fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000302:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_ToggleHandle = osThreadCreate(osThread(Task_Toggle), NULL);
 8000306:	f107 0320 	add.w	r3, r7, #32
 800030a:	2100      	movs	r1, #0
 800030c:	4618      	mov	r0, r3
 800030e:	f003 fa43 	bl	8003798 <osThreadCreate>
 8000312:	4602      	mov	r2, r0
 8000314:	4b10      	ldr	r3, [pc, #64]	; (8000358 <main+0xd0>)
 8000316:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(Task_LCD, Task_LCD_init, osPriorityNormal, 0, 128);
 8000318:	4b10      	ldr	r3, [pc, #64]	; (800035c <main+0xd4>)
 800031a:	1d3c      	adds	r4, r7, #4
 800031c:	461d      	mov	r5, r3
 800031e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000322:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000326:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_LCDHandle = osThreadCreate(osThread(Task_LCD), NULL);
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f003 fa32 	bl	8003798 <osThreadCreate>
 8000334:	4602      	mov	r2, r0
 8000336:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <main+0xd8>)
 8000338:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800033a:	f003 fa26 	bl	800378a <osKernelStart>
 
  while (1){
 800033e:	e7fe      	b.n	800033e <main+0xb6>
 8000340:	20001108 	.word	0x20001108
 8000344:	20001048 	.word	0x20001048
 8000348:	200010fc 	.word	0x200010fc
 800034c:	08005a68 	.word	0x08005a68
 8000350:	20001104 	.word	0x20001104
 8000354:	08005a90 	.word	0x08005a90
 8000358:	20001100 	.word	0x20001100
 800035c:	08005ab8 	.word	0x08005ab8
 8000360:	20001044 	.word	0x20001044

08000364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b094      	sub	sp, #80	; 0x50
 8000368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800036e:	2228      	movs	r2, #40	; 0x28
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f005 fb5d 	bl	8005a32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000378:	f107 0314 	add.w	r3, r7, #20
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	605a      	str	r2, [r3, #4]
 8000382:	609a      	str	r2, [r3, #8]
 8000384:	60da      	str	r2, [r3, #12]
 8000386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000394:	2302      	movs	r3, #2
 8000396:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000398:	2301      	movs	r3, #1
 800039a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800039c:	2310      	movs	r3, #16
 800039e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a0:	2302      	movs	r3, #2
 80003a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003a4:	2300      	movs	r3, #0
 80003a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 80003a8:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80003ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 f8ce 	bl	8002554 <HAL_RCC_OscConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003be:	f000 fab1 	bl	8000924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c2:	230f      	movs	r3, #15
 80003c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003d8:	f107 0314 	add.w	r3, r7, #20
 80003dc:	2101      	movs	r1, #1
 80003de:	4618      	mov	r0, r3
 80003e0:	f002 fb38 	bl	8002a54 <HAL_RCC_ClockConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003ea:	f000 fa9b 	bl	8000924 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003ee:	2302      	movs	r3, #2
 80003f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4618      	mov	r0, r3
 80003fa:	f002 fcf7 	bl	8002dec <HAL_RCCEx_PeriphCLKConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000404:	f000 fa8e 	bl	8000924 <Error_Handler>
  }
}
 8000408:	bf00      	nop
 800040a:	3750      	adds	r7, #80	; 0x50
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <MX_ADC1_Init+0x74>)
 8000422:	4a19      	ldr	r2, [pc, #100]	; (8000488 <MX_ADC1_Init+0x78>)
 8000424:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <MX_ADC1_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <MX_ADC1_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <MX_ADC1_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <MX_ADC1_Init+0x74>)
 800043a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800043e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000440:	4b10      	ldr	r3, [pc, #64]	; (8000484 <MX_ADC1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_ADC1_Init+0x74>)
 8000448:	2201      	movs	r2, #1
 800044a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800044c:	480d      	ldr	r0, [pc, #52]	; (8000484 <MX_ADC1_Init+0x74>)
 800044e:	f000 fc7b 	bl	8000d48 <HAL_ADC_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000458:	f000 fa64 	bl	8000924 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800045c:	2300      	movs	r3, #0
 800045e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000460:	2301      	movs	r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000464:	2307      	movs	r3, #7
 8000466:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	4619      	mov	r1, r3
 800046c:	4805      	ldr	r0, [pc, #20]	; (8000484 <MX_ADC1_Init+0x74>)
 800046e:	f000 fe3d 	bl	80010ec <HAL_ADC_ConfigChannel>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000478:	f000 fa54 	bl	8000924 <Error_Handler>
  }
}
 800047c:	bf00      	nop
 800047e:	3710      	adds	r7, #16
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20001048 	.word	0x20001048
 8000488:	40012400 	.word	0x40012400

0800048c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <MX_I2C1_Init+0x50>)
 8000492:	4a13      	ldr	r2, [pc, #76]	; (80004e0 <MX_I2C1_Init+0x54>)
 8000494:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_I2C1_Init+0x50>)
 8000498:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <MX_I2C1_Init+0x58>)
 800049a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <MX_I2C1_Init+0x50>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_I2C1_Init+0x50>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <MX_I2C1_Init+0x50>)
 80004aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b0:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <MX_I2C1_Init+0x50>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <MX_I2C1_Init+0x50>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <MX_I2C1_Init+0x50>)
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <MX_I2C1_Init+0x50>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004c8:	4804      	ldr	r0, [pc, #16]	; (80004dc <MX_I2C1_Init+0x50>)
 80004ca:	f001 fc21 	bl	8001d10 <HAL_I2C_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004d4:	f000 fa26 	bl	8000924 <Error_Handler>
  }
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000ff0 	.word	0x20000ff0
 80004e0:	40005400 	.word	0x40005400
 80004e4:	000186a0 	.word	0x000186a0

080004e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 80004ee:	4a12      	ldr	r2, [pc, #72]	; (8000538 <MX_USART1_UART_Init+0x50>)
 80004f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 80004f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 800050e:	220c      	movs	r2, #12
 8000510:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 8000520:	f002 ff12 	bl	8003348 <HAL_UART_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800052a:	f000 f9fb 	bl	8000924 <Error_Handler>
  }
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20001078 	.word	0x20001078
 8000538:	40013800 	.word	0x40013800

0800053c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_DMA_Init+0x38>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <MX_DMA_Init+0x38>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_DMA_Init+0x38>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2105      	movs	r1, #5
 800055e:	200b      	movs	r0, #11
 8000560:	f001 f834 	bl	80015cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000564:	200b      	movs	r0, #11
 8000566:	f001 f84d 	bl	8001604 <HAL_NVIC_EnableIRQ>

}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000

08000578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 0310 	add.w	r3, r7, #16
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <MX_GPIO_Init+0xb8>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a27      	ldr	r2, [pc, #156]	; (8000630 <MX_GPIO_Init+0xb8>)
 8000592:	f043 0310 	orr.w	r3, r3, #16
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <MX_GPIO_Init+0xb8>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0310 	and.w	r3, r3, #16
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <MX_GPIO_Init+0xb8>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <MX_GPIO_Init+0xb8>)
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <MX_GPIO_Init+0xb8>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <MX_GPIO_Init+0xb8>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a1b      	ldr	r2, [pc, #108]	; (8000630 <MX_GPIO_Init+0xb8>)
 80005c2:	f043 0308 	orr.w	r3, r3, #8
 80005c6:	6193      	str	r3, [r2, #24]
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <MX_GPIO_Init+0xb8>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f003 0308 	and.w	r3, r3, #8
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	4816      	ldr	r0, [pc, #88]	; (8000634 <MX_GPIO_Init+0xbc>)
 80005dc:	f001 fb68 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80005e6:	4814      	ldr	r0, [pc, #80]	; (8000638 <MX_GPIO_Init+0xc0>)
 80005e8:	f001 fb62 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2302      	movs	r3, #2
 80005fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	4619      	mov	r1, r3
 8000604:	480b      	ldr	r0, [pc, #44]	; (8000634 <MX_GPIO_Init+0xbc>)
 8000606:	f001 f9f9 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800060a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800060e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2302      	movs	r3, #2
 800061a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4619      	mov	r1, r3
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_GPIO_Init+0xc0>)
 8000624:	f001 f9ea 	bl	80019fc <HAL_GPIO_Init>

}
 8000628:	bf00      	nop
 800062a:	3720      	adds	r7, #32
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000
 8000634:	40011000 	.word	0x40011000
 8000638:	40010c00 	.word	0x40010c00

0800063c <TaskTemp_init>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_TaskTemp_init */
void TaskTemp_init(void const * argument)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	HAL_ADC_Start_DMA(&hadc1, value, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	4911      	ldr	r1, [pc, #68]	; (800068c <TaskTemp_init+0x50>)
 8000648:	4811      	ldr	r0, [pc, #68]	; (8000690 <TaskTemp_init+0x54>)
 800064a:	f000 fc55 	bl	8000ef8 <HAL_ADC_Start_DMA>
	osDelay(500);
 800064e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000652:	f003 f8ed 	bl	8003830 <osDelay>

	xSemaphoreTake(uartMutexHandle, portMAX_DELAY);
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <TaskTemp_init+0x58>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f04f 31ff 	mov.w	r1, #4294967295
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fc40 	bl	8003ee4 <xQueueSemaphoreTake>
	HAL_UART_Transmit(&huart1, data, 35 ,1000);
 8000664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000668:	2223      	movs	r2, #35	; 0x23
 800066a:	490b      	ldr	r1, [pc, #44]	; (8000698 <TaskTemp_init+0x5c>)
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <TaskTemp_init+0x60>)
 800066e:	f002 feb8 	bl	80033e2 <HAL_UART_Transmit>
	xSemaphoreGive(uartMutexHandle);
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <TaskTemp_init+0x58>)
 8000674:	6818      	ldr	r0, [r3, #0]
 8000676:	2300      	movs	r3, #0
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	f003 fb38 	bl	8003cf0 <xQueueGenericSend>
    osDelay(500);//cada seg
 8000680:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000684:	f003 f8d4 	bl	8003830 <osDelay>
	HAL_ADC_Start_DMA(&hadc1, value, 1);
 8000688:	e7dc      	b.n	8000644 <TaskTemp_init+0x8>
 800068a:	bf00      	nop
 800068c:	20001108 	.word	0x20001108
 8000690:	20001048 	.word	0x20001048
 8000694:	200010fc 	.word	0x200010fc
 8000698:	20000000 	.word	0x20000000
 800069c:	20001078 	.word	0x20001078

080006a0 <Task_Toggle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Toggle_init */
void Task_Toggle_init(void const * argument)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	 xSemaphoreTake(uartMutexHandle, portMAX_DELAY);
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <Task_Toggle_init+0x38>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f04f 31ff 	mov.w	r1, #4294967295
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 fc17 	bl	8003ee4 <xQueueSemaphoreTake>
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80006b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ba:	4808      	ldr	r0, [pc, #32]	; (80006dc <Task_Toggle_init+0x3c>)
 80006bc:	f001 fb10 	bl	8001ce0 <HAL_GPIO_TogglePin>
	 xSemaphoreGive(uartMutexHandle);
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <Task_Toggle_init+0x38>)
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	f003 fb11 	bl	8003cf0 <xQueueGenericSend>
    osDelay(500);//cada seg
 80006ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d2:	f003 f8ad 	bl	8003830 <osDelay>
	 xSemaphoreTake(uartMutexHandle, portMAX_DELAY);
 80006d6:	e7e7      	b.n	80006a8 <Task_Toggle_init+0x8>
 80006d8:	200010fc 	.word	0x200010fc
 80006dc:	40011000 	.word	0x40011000

080006e0 <Task_LCD_init>:
  }
}

void Task_LCD_init(void const * argument)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	lcd_send_cmd(0x80);
 80006e8:	2080      	movs	r0, #128	; 0x80
 80006ea:	f7ff fd49 	bl	8000180 <lcd_send_cmd>
	  lcd_send_string("TEMP:");
 80006ee:	4862      	ldr	r0, [pc, #392]	; (8000878 <Task_LCD_init+0x198>)
 80006f0:	f7ff fdb6 	bl	8000260 <lcd_send_string>
	  lcd_send_data((value[0]/1000)+48);//decimal
 80006f4:	4b61      	ldr	r3, [pc, #388]	; (800087c <Task_LCD_init+0x19c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a61      	ldr	r2, [pc, #388]	; (8000880 <Task_LCD_init+0x1a0>)
 80006fa:	fba2 2303 	umull	r2, r3, r2, r3
 80006fe:	099b      	lsrs	r3, r3, #6
 8000700:	b2db      	uxtb	r3, r3
 8000702:	3330      	adds	r3, #48	; 0x30
 8000704:	b2db      	uxtb	r3, r3
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff fd6a 	bl	80001e0 <lcd_send_data>
	  lcd_send_data(((value[0]%1000)/100)+48);//unidad
 800070c:	4b5b      	ldr	r3, [pc, #364]	; (800087c <Task_LCD_init+0x19c>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b5b      	ldr	r3, [pc, #364]	; (8000880 <Task_LCD_init+0x1a0>)
 8000712:	fba3 1302 	umull	r1, r3, r3, r2
 8000716:	099b      	lsrs	r3, r3, #6
 8000718:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800071c:	fb01 f303 	mul.w	r3, r1, r3
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	4a58      	ldr	r2, [pc, #352]	; (8000884 <Task_LCD_init+0x1a4>)
 8000724:	fba2 2303 	umull	r2, r3, r2, r3
 8000728:	095b      	lsrs	r3, r3, #5
 800072a:	b2db      	uxtb	r3, r3
 800072c:	3330      	adds	r3, #48	; 0x30
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd55 	bl	80001e0 <lcd_send_data>
	  lcd_send_string(".");
 8000736:	4854      	ldr	r0, [pc, #336]	; (8000888 <Task_LCD_init+0x1a8>)
 8000738:	f7ff fd92 	bl	8000260 <lcd_send_string>
	  lcd_send_data(((value[0]%100)/10)+48);//punto decimal
 800073c:	4b4f      	ldr	r3, [pc, #316]	; (800087c <Task_LCD_init+0x19c>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b50      	ldr	r3, [pc, #320]	; (8000884 <Task_LCD_init+0x1a4>)
 8000742:	fba3 1302 	umull	r1, r3, r3, r2
 8000746:	095b      	lsrs	r3, r3, #5
 8000748:	2164      	movs	r1, #100	; 0x64
 800074a:	fb01 f303 	mul.w	r3, r1, r3
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	4a4e      	ldr	r2, [pc, #312]	; (800088c <Task_LCD_init+0x1ac>)
 8000752:	fba2 2303 	umull	r2, r3, r2, r3
 8000756:	08db      	lsrs	r3, r3, #3
 8000758:	b2db      	uxtb	r3, r3
 800075a:	3330      	adds	r3, #48	; 0x30
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fd3e 	bl	80001e0 <lcd_send_data>
	  lcd_send_string(" C     ");
 8000764:	484a      	ldr	r0, [pc, #296]	; (8000890 <Task_LCD_init+0x1b0>)
 8000766:	f7ff fd7b 	bl	8000260 <lcd_send_string>
	  lcd_send_cmd(0xc0); //segunda linea
 800076a:	20c0      	movs	r0, #192	; 0xc0
 800076c:	f7ff fd08 	bl	8000180 <lcd_send_cmd>
	  lcd_send_string("                ");
 8000770:	4848      	ldr	r0, [pc, #288]	; (8000894 <Task_LCD_init+0x1b4>)
 8000772:	f7ff fd75 	bl	8000260 <lcd_send_string>

	  HAL_Delay(200);
 8000776:	20c8      	movs	r0, #200	; 0xc8
 8000778:	f000 fac4 	bl	8000d04 <HAL_Delay>

	  //condicionales para indicadores LED
	  	  if(((value[0]/1000)+48)>50){
 800077c:	4b3f      	ldr	r3, [pc, #252]	; (800087c <Task_LCD_init+0x19c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a3f      	ldr	r2, [pc, #252]	; (8000880 <Task_LCD_init+0x1a0>)
 8000782:	fba2 2303 	umull	r2, r3, r2, r3
 8000786:	099b      	lsrs	r3, r3, #6
 8000788:	3330      	adds	r3, #48	; 0x30
 800078a:	2b32      	cmp	r3, #50	; 0x32
 800078c:	d91e      	bls.n	80007cc <Task_LCD_init+0xec>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//PRENDE
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000794:	4840      	ldr	r0, [pc, #256]	; (8000898 <Task_LCD_init+0x1b8>)
 8000796:	f001 fa8b 	bl	8001cb0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//APAGAR
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a0:	483d      	ldr	r0, [pc, #244]	; (8000898 <Task_LCD_init+0x1b8>)
 80007a2:	f001 fa85 	bl	8001cb0 <HAL_GPIO_WritePin>
			  data[18]='O', data[19]='n', data[20]=' ';
 80007a6:	4b3d      	ldr	r3, [pc, #244]	; (800089c <Task_LCD_init+0x1bc>)
 80007a8:	224f      	movs	r2, #79	; 0x4f
 80007aa:	749a      	strb	r2, [r3, #18]
 80007ac:	4b3b      	ldr	r3, [pc, #236]	; (800089c <Task_LCD_init+0x1bc>)
 80007ae:	226e      	movs	r2, #110	; 0x6e
 80007b0:	74da      	strb	r2, [r3, #19]
 80007b2:	4b3a      	ldr	r3, [pc, #232]	; (800089c <Task_LCD_init+0x1bc>)
 80007b4:	2220      	movs	r2, #32
 80007b6:	751a      	strb	r2, [r3, #20]
			  data[30]='O', data[31]='f', data[32]='f';
 80007b8:	4b38      	ldr	r3, [pc, #224]	; (800089c <Task_LCD_init+0x1bc>)
 80007ba:	224f      	movs	r2, #79	; 0x4f
 80007bc:	779a      	strb	r2, [r3, #30]
 80007be:	4b37      	ldr	r3, [pc, #220]	; (800089c <Task_LCD_init+0x1bc>)
 80007c0:	2266      	movs	r2, #102	; 0x66
 80007c2:	77da      	strb	r2, [r3, #31]
 80007c4:	4b35      	ldr	r3, [pc, #212]	; (800089c <Task_LCD_init+0x1bc>)
 80007c6:	2266      	movs	r2, #102	; 0x66
 80007c8:	f883 2020 	strb.w	r2, [r3, #32]
	  	  }

	  	  if(((value[0]/1000)+48)<50){
 80007cc:	4b2b      	ldr	r3, [pc, #172]	; (800087c <Task_LCD_init+0x19c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a2b      	ldr	r2, [pc, #172]	; (8000880 <Task_LCD_init+0x1a0>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	099b      	lsrs	r3, r3, #6
 80007d8:	3330      	adds	r3, #48	; 0x30
 80007da:	2b31      	cmp	r3, #49	; 0x31
 80007dc:	d81e      	bhi.n	800081c <Task_LCD_init+0x13c>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//APAGA
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e4:	482c      	ldr	r0, [pc, #176]	; (8000898 <Task_LCD_init+0x1b8>)
 80007e6:	f001 fa63 	bl	8001cb0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);//PRENDE
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f0:	4829      	ldr	r0, [pc, #164]	; (8000898 <Task_LCD_init+0x1b8>)
 80007f2:	f001 fa5d 	bl	8001cb0 <HAL_GPIO_WritePin>
			  data[18]='O', data[19]='f', data[20]='f';
 80007f6:	4b29      	ldr	r3, [pc, #164]	; (800089c <Task_LCD_init+0x1bc>)
 80007f8:	224f      	movs	r2, #79	; 0x4f
 80007fa:	749a      	strb	r2, [r3, #18]
 80007fc:	4b27      	ldr	r3, [pc, #156]	; (800089c <Task_LCD_init+0x1bc>)
 80007fe:	2266      	movs	r2, #102	; 0x66
 8000800:	74da      	strb	r2, [r3, #19]
 8000802:	4b26      	ldr	r3, [pc, #152]	; (800089c <Task_LCD_init+0x1bc>)
 8000804:	2266      	movs	r2, #102	; 0x66
 8000806:	751a      	strb	r2, [r3, #20]
			  data[30]='O', data[31]='n', data[32]=' ';
 8000808:	4b24      	ldr	r3, [pc, #144]	; (800089c <Task_LCD_init+0x1bc>)
 800080a:	224f      	movs	r2, #79	; 0x4f
 800080c:	779a      	strb	r2, [r3, #30]
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <Task_LCD_init+0x1bc>)
 8000810:	226e      	movs	r2, #110	; 0x6e
 8000812:	77da      	strb	r2, [r3, #31]
 8000814:	4b21      	ldr	r3, [pc, #132]	; (800089c <Task_LCD_init+0x1bc>)
 8000816:	2220      	movs	r2, #32
 8000818:	f883 2020 	strb.w	r2, [r3, #32]
	  	  }
	  	  if(((value[0]/1000)+48) == 50){
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <Task_LCD_init+0x19c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000828:	d21e      	bcs.n	8000868 <Task_LCD_init+0x188>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//APAGA
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000830:	4819      	ldr	r0, [pc, #100]	; (8000898 <Task_LCD_init+0x1b8>)
 8000832:	f001 fa3d 	bl	8001cb0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);//PRENDE
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800083c:	4816      	ldr	r0, [pc, #88]	; (8000898 <Task_LCD_init+0x1b8>)
 800083e:	f001 fa37 	bl	8001cb0 <HAL_GPIO_WritePin>
	  		  data[18]='O', data[19]='f', data[20]='f';
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <Task_LCD_init+0x1bc>)
 8000844:	224f      	movs	r2, #79	; 0x4f
 8000846:	749a      	strb	r2, [r3, #18]
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <Task_LCD_init+0x1bc>)
 800084a:	2266      	movs	r2, #102	; 0x66
 800084c:	74da      	strb	r2, [r3, #19]
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <Task_LCD_init+0x1bc>)
 8000850:	2266      	movs	r2, #102	; 0x66
 8000852:	751a      	strb	r2, [r3, #20]
	  		  data[30]='O', data[31]='f', data[32]='f';
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <Task_LCD_init+0x1bc>)
 8000856:	224f      	movs	r2, #79	; 0x4f
 8000858:	779a      	strb	r2, [r3, #30]
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <Task_LCD_init+0x1bc>)
 800085c:	2266      	movs	r2, #102	; 0x66
 800085e:	77da      	strb	r2, [r3, #31]
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <Task_LCD_init+0x1bc>)
 8000862:	2266      	movs	r2, #102	; 0x66
 8000864:	f883 2020 	strb.w	r2, [r3, #32]
	  	  }


	  	//imprimir temp en uart
	  	uart_Temp();
 8000868:	f000 f81a 	bl	80008a0 <uart_Temp>

    osDelay(1000);//cada seg
 800086c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000870:	f002 ffde 	bl	8003830 <osDelay>
	lcd_send_cmd(0x80);
 8000874:	e738      	b.n	80006e8 <Task_LCD_init+0x8>
 8000876:	bf00      	nop
 8000878:	08005ad4 	.word	0x08005ad4
 800087c:	20001108 	.word	0x20001108
 8000880:	10624dd3 	.word	0x10624dd3
 8000884:	51eb851f 	.word	0x51eb851f
 8000888:	08005adc 	.word	0x08005adc
 800088c:	cccccccd 	.word	0xcccccccd
 8000890:	08005ae0 	.word	0x08005ae0
 8000894:	08005ae8 	.word	0x08005ae8
 8000898:	40010c00 	.word	0x40010c00
 800089c:	20000000 	.word	0x20000000

080008a0 <uart_Temp>:
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void uart_Temp(void){
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
	  data[6]=((value[0]/1000)+48);
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <uart_Temp+0x50>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <uart_Temp+0x54>)
 80008aa:	fba2 2303 	umull	r2, r3, r2, r3
 80008ae:	099b      	lsrs	r3, r3, #6
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	3330      	adds	r3, #48	; 0x30
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <uart_Temp+0x58>)
 80008b8:	719a      	strb	r2, [r3, #6]
	  data[7]=(((value[0]%1000)/100)+48);
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <uart_Temp+0x50>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <uart_Temp+0x54>)
 80008c0:	fba3 1302 	umull	r1, r3, r3, r2
 80008c4:	099b      	lsrs	r3, r3, #6
 80008c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008ca:	fb01 f303 	mul.w	r3, r1, r3
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <uart_Temp+0x5c>)
 80008d2:	fba2 2303 	umull	r2, r3, r2, r3
 80008d6:	095b      	lsrs	r3, r3, #5
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	3330      	adds	r3, #48	; 0x30
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <uart_Temp+0x58>)
 80008e0:	71da      	strb	r2, [r3, #7]
	  data[8]=('C');
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <uart_Temp+0x58>)
 80008e4:	2243      	movs	r2, #67	; 0x43
 80008e6:	721a      	strb	r2, [r3, #8]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	20001108 	.word	0x20001108
 80008f4:	10624dd3 	.word	0x10624dd3
 80008f8:	20000000 	.word	0x20000000
 80008fc:	51eb851f 	.word	0x51eb851f

08000900 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d101      	bne.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000912:	f000 f9db 	bl	8000ccc <HAL_IncTick>
  }
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40012c00 	.word	0x40012c00

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a28      	ldr	r2, [pc, #160]	; (80009ec <HAL_ADC_MspInit+0xbc>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d149      	bne.n	80009e4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	4a26      	ldr	r2, [pc, #152]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 8000956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800095a:	6193      	str	r3, [r2, #24]
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a20      	ldr	r2, [pc, #128]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 800096e:	f043 0304 	orr.w	r3, r3, #4
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000980:	2301      	movs	r3, #1
 8000982:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000984:	2303      	movs	r3, #3
 8000986:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4619      	mov	r1, r3
 800098e:	4819      	ldr	r0, [pc, #100]	; (80009f4 <HAL_ADC_MspInit+0xc4>)
 8000990:	f001 f834 	bl	80019fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_ADC_MspInit+0xc8>)
 8000996:	4a19      	ldr	r2, [pc, #100]	; (80009fc <HAL_ADC_MspInit+0xcc>)
 8000998:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_ADC_MspInit+0xc8>)
 800099c:	2200      	movs	r2, #0
 800099e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_ADC_MspInit+0xc8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_ADC_MspInit+0xc8>)
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_ADC_MspInit+0xc8>)
 80009ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <HAL_ADC_MspInit+0xc8>)
 80009b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_ADC_MspInit+0xc8>)
 80009be:	2220      	movs	r2, #32
 80009c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <HAL_ADC_MspInit+0xc8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009c8:	480b      	ldr	r0, [pc, #44]	; (80009f8 <HAL_ADC_MspInit+0xc8>)
 80009ca:	f000 fe29 	bl	8001620 <HAL_DMA_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80009d4:	f7ff ffa6 	bl	8000924 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_ADC_MspInit+0xc8>)
 80009dc:	621a      	str	r2, [r3, #32]
 80009de:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <HAL_ADC_MspInit+0xc8>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009e4:	bf00      	nop
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40012400 	.word	0x40012400
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40010800 	.word	0x40010800
 80009f8:	200010b8 	.word	0x200010b8
 80009fc:	40020008 	.word	0x40020008

08000a00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a15      	ldr	r2, [pc, #84]	; (8000a70 <HAL_I2C_MspInit+0x70>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d123      	bne.n	8000a68 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_I2C_MspInit+0x74>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a13      	ldr	r2, [pc, #76]	; (8000a74 <HAL_I2C_MspInit+0x74>)
 8000a26:	f043 0308 	orr.w	r3, r3, #8
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <HAL_I2C_MspInit+0x74>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0308 	and.w	r3, r3, #8
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a38:	23c0      	movs	r3, #192	; 0xc0
 8000a3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3c:	2312      	movs	r3, #18
 8000a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480b      	ldr	r0, [pc, #44]	; (8000a78 <HAL_I2C_MspInit+0x78>)
 8000a4c:	f000 ffd6 	bl	80019fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_I2C_MspInit+0x74>)
 8000a52:	69db      	ldr	r3, [r3, #28]
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_I2C_MspInit+0x74>)
 8000a56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a5a:	61d3      	str	r3, [r2, #28]
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_I2C_MspInit+0x74>)
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a68:	bf00      	nop
 8000a6a:	3720      	adds	r7, #32
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40005400 	.word	0x40005400
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010c00 	.word	0x40010c00

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <HAL_UART_MspInit+0x8c>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d131      	bne.n	8000b00 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <HAL_UART_MspInit+0x90>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a1a      	ldr	r2, [pc, #104]	; (8000b0c <HAL_UART_MspInit+0x90>)
 8000aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <HAL_UART_MspInit+0x90>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_UART_MspInit+0x90>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <HAL_UART_MspInit+0x90>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_UART_MspInit+0x90>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ad0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <HAL_UART_MspInit+0x94>)
 8000ae2:	f000 ff8b 	bl	80019fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4619      	mov	r1, r3
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <HAL_UART_MspInit+0x94>)
 8000afc:	f000 ff7e 	bl	80019fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40013800 	.word	0x40013800
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010800 	.word	0x40010800

08000b14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	2019      	movs	r0, #25
 8000b2a:	f000 fd4f 	bl	80015cc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8000b2e:	2019      	movs	r0, #25
 8000b30:	f000 fd68 	bl	8001604 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <HAL_InitTick+0x9c>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a1d      	ldr	r2, [pc, #116]	; (8000bb0 <HAL_InitTick+0x9c>)
 8000b3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <HAL_InitTick+0x9c>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b4c:	f107 0210 	add.w	r2, r7, #16
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 f8fa 	bl	8002d50 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b5c:	f002 f8e4 	bl	8002d28 <HAL_RCC_GetPCLK2Freq>
 8000b60:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <HAL_InitTick+0xa0>)
 8000b66:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6a:	0c9b      	lsrs	r3, r3, #18
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <HAL_InitTick+0xa8>)
 8000b74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b82:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b92:	f002 f9e1 	bl	8002f58 <HAL_TIM_Base_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d104      	bne.n	8000ba6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b9c:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b9e:	f002 fa0f 	bl	8002fc0 <HAL_TIM_Base_Start_IT>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3730      	adds	r7, #48	; 0x30
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	431bde83 	.word	0x431bde83
 8000bb8:	2000110c 	.word	0x2000110c
 8000bbc:	40012c00 	.word	0x40012c00

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <HardFault_Handler+0x4>

08000bd2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <MemManage_Handler+0x4>

08000bd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <BusFault_Handler+0x4>

08000bde <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <UsageFault_Handler+0x4>

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <DMA1_Channel1_IRQHandler+0x10>)
 8000bf6:	f000 fdcd 	bl	8001794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200010b8 	.word	0x200010b8

08000c04 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <TIM1_UP_IRQHandler+0x10>)
 8000c0a:	f002 f9fc 	bl	8003006 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000110c 	.word	0x2000110c

08000c18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <SystemInit+0x5c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <SystemInit+0x5c>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <SystemInit+0x5c>)
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	4911      	ldr	r1, [pc, #68]	; (8000c74 <SystemInit+0x5c>)
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <SystemInit+0x60>)
 8000c30:	4013      	ands	r3, r2
 8000c32:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <SystemInit+0x5c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <SystemInit+0x5c>)
 8000c3a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c42:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <SystemInit+0x5c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <SystemInit+0x5c>)
 8000c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <SystemInit+0x5c>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <SystemInit+0x5c>)
 8000c56:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000c5a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <SystemInit+0x5c>)
 8000c5e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000c62:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SystemInit+0x64>)
 8000c66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c6a:	609a      	str	r2, [r3, #8]
#endif 
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	40021000 	.word	0x40021000
 8000c78:	f8ff0000 	.word	0xf8ff0000
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c82:	e003      	b.n	8000c8c <LoopCopyDataInit>

08000c84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c8a:	3104      	adds	r1, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c8c:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c94:	d3f6      	bcc.n	8000c84 <CopyDataInit>
  ldr r2, =_sbss
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c98:	e002      	b.n	8000ca0 <LoopFillZerobss>

08000c9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c9c:	f842 3b04 	str.w	r3, [r2], #4

08000ca0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ca2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ca4:	d3f9      	bcc.n	8000c9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ca6:	f7ff ffb7 	bl	8000c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000caa:	f004 fe93 	bl	80059d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cae:	f7ff faeb 	bl	8000288 <main>
  bx lr
 8000cb2:	4770      	bx	lr
  ldr r3, =_sidata
 8000cb4:	08005b38 	.word	0x08005b38
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000cbc:	20000034 	.word	0x20000034
  ldr r2, =_sbss
 8000cc0:	20000034 	.word	0x20000034
  ldr r3, = _ebss
 8000cc4:	20001150 	.word	0x20001150

08000cc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC1_2_IRQHandler>
	...

08000ccc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_IncTick+0x1c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x20>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a03      	ldr	r2, [pc, #12]	; (8000cec <HAL_IncTick+0x20>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	2000002c 	.word	0x2000002c
 8000cec:	2000114c 	.word	0x2000114c

08000cf0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b02      	ldr	r3, [pc, #8]	; (8000d00 <HAL_GetTick+0x10>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	2000114c 	.word	0x2000114c

08000d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d0c:	f7ff fff0 	bl	8000cf0 <HAL_GetTick>
 8000d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1c:	d005      	beq.n	8000d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_Delay+0x40>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d2a:	bf00      	nop
 8000d2c:	f7ff ffe0 	bl	8000cf0 <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d8f7      	bhi.n	8000d2c <HAL_Delay+0x28>
  {
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	2000002c 	.word	0x2000002c

08000d48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e0be      	b.n	8000ee8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d109      	bne.n	8000d8c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fdd2 	bl	8000930 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f000 faf7 	bl	8001380 <ADC_ConversionStop_Disable>
 8000d92:	4603      	mov	r3, r0
 8000d94:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 8099 	bne.w	8000ed6 <HAL_ADC_Init+0x18e>
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8095 	bne.w	8000ed6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000db4:	f023 0302 	bic.w	r3, r3, #2
 8000db8:	f043 0202 	orr.w	r2, r3, #2
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dc8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	7b1b      	ldrb	r3, [r3, #12]
 8000dce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000dd0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000de0:	d003      	beq.n	8000dea <HAL_ADC_Init+0xa2>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d102      	bne.n	8000df0 <HAL_ADC_Init+0xa8>
 8000dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dee:	e000      	b.n	8000df2 <HAL_ADC_Init+0xaa>
 8000df0:	2300      	movs	r3, #0
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	7d1b      	ldrb	r3, [r3, #20]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d119      	bne.n	8000e34 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7b1b      	ldrb	r3, [r3, #12]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d109      	bne.n	8000e1c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	035a      	lsls	r2, r3, #13
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	e00b      	b.n	8000e34 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e20:	f043 0220 	orr.w	r2, r3, #32
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2c:	f043 0201 	orr.w	r2, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <HAL_ADC_Init+0x1a8>)
 8000e50:	4013      	ands	r3, r2
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	6812      	ldr	r2, [r2, #0]
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e64:	d003      	beq.n	8000e6e <HAL_ADC_Init+0x126>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d104      	bne.n	8000e78 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	051b      	lsls	r3, r3, #20
 8000e76:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_ADC_Init+0x1ac>)
 8000e94:	4013      	ands	r3, r2
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d10b      	bne.n	8000eb4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea6:	f023 0303 	bic.w	r3, r3, #3
 8000eaa:	f043 0201 	orr.w	r2, r3, #1
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000eb2:	e018      	b.n	8000ee6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	f023 0312 	bic.w	r3, r3, #18
 8000ebc:	f043 0210 	orr.w	r2, r3, #16
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec8:	f043 0201 	orr.w	r2, r3, #1
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ed4:	e007      	b.n	8000ee6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eda:	f043 0210 	orr.w	r2, r3, #16
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	ffe1f7fd 	.word	0xffe1f7fd
 8000ef4:	ff1f0efe 	.word	0xff1f0efe

08000ef8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f04:	2300      	movs	r3, #0
 8000f06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a64      	ldr	r2, [pc, #400]	; (80010a0 <HAL_ADC_Start_DMA+0x1a8>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d004      	beq.n	8000f1c <HAL_ADC_Start_DMA+0x24>
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a63      	ldr	r2, [pc, #396]	; (80010a4 <HAL_ADC_Start_DMA+0x1ac>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d106      	bne.n	8000f2a <HAL_ADC_Start_DMA+0x32>
 8000f1c:	4b60      	ldr	r3, [pc, #384]	; (80010a0 <HAL_ADC_Start_DMA+0x1a8>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f040 80b3 	bne.w	8001090 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d101      	bne.n	8000f38 <HAL_ADC_Start_DMA+0x40>
 8000f34:	2302      	movs	r3, #2
 8000f36:	e0ae      	b.n	8001096 <HAL_ADC_Start_DMA+0x19e>
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f000 f9cb 	bl	80012dc <ADC_Enable>
 8000f46:	4603      	mov	r3, r0
 8000f48:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f4a:	7dfb      	ldrb	r3, [r7, #23]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f040 809a 	bne.w	8001086 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f5a:	f023 0301 	bic.w	r3, r3, #1
 8000f5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a4e      	ldr	r2, [pc, #312]	; (80010a4 <HAL_ADC_Start_DMA+0x1ac>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d105      	bne.n	8000f7c <HAL_ADC_Start_DMA+0x84>
 8000f70:	4b4b      	ldr	r3, [pc, #300]	; (80010a0 <HAL_ADC_Start_DMA+0x1a8>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d115      	bne.n	8000fa8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f80:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d026      	beq.n	8000fe4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fa6:	e01d      	b.n	8000fe4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a39      	ldr	r2, [pc, #228]	; (80010a0 <HAL_ADC_Start_DMA+0x1a8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d004      	beq.n	8000fc8 <HAL_ADC_Start_DMA+0xd0>
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a38      	ldr	r2, [pc, #224]	; (80010a4 <HAL_ADC_Start_DMA+0x1ac>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d10d      	bne.n	8000fe4 <HAL_ADC_Start_DMA+0xec>
 8000fc8:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <HAL_ADC_Start_DMA+0x1a8>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d007      	beq.n	8000fe4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fdc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d006      	beq.n	8000ffe <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff4:	f023 0206 	bic.w	r2, r3, #6
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ffc:	e002      	b.n	8001004 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2200      	movs	r2, #0
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	4a25      	ldr	r2, [pc, #148]	; (80010a8 <HAL_ADC_Start_DMA+0x1b0>)
 8001012:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	4a24      	ldr	r2, [pc, #144]	; (80010ac <HAL_ADC_Start_DMA+0x1b4>)
 800101a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <HAL_ADC_Start_DMA+0x1b8>)
 8001022:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f06f 0202 	mvn.w	r2, #2
 800102c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800103c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6a18      	ldr	r0, [r3, #32]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	334c      	adds	r3, #76	; 0x4c
 8001048:	4619      	mov	r1, r3
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f000 fb41 	bl	80016d4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800105c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001060:	d108      	bne.n	8001074 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001070:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001072:	e00f      	b.n	8001094 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001082:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001084:	e006      	b.n	8001094 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800108e:	e001      	b.n	8001094 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001094:	7dfb      	ldrb	r3, [r7, #23]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40012400 	.word	0x40012400
 80010a4:	40012800 	.word	0x40012800
 80010a8:	080013f5 	.word	0x080013f5
 80010ac:	08001471 	.word	0x08001471
 80010b0:	0800148d 	.word	0x0800148d

080010b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
	...

080010ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001104:	2b01      	cmp	r3, #1
 8001106:	d101      	bne.n	800110c <HAL_ADC_ConfigChannel+0x20>
 8001108:	2302      	movs	r3, #2
 800110a:	e0dc      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1da>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b06      	cmp	r3, #6
 800111a:	d81c      	bhi.n	8001156 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	3b05      	subs	r3, #5
 800112e:	221f      	movs	r2, #31
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	4019      	ands	r1, r3
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	3b05      	subs	r3, #5
 8001148:	fa00 f203 	lsl.w	r2, r0, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	635a      	str	r2, [r3, #52]	; 0x34
 8001154:	e03c      	b.n	80011d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b0c      	cmp	r3, #12
 800115c:	d81c      	bhi.n	8001198 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	3b23      	subs	r3, #35	; 0x23
 8001170:	221f      	movs	r2, #31
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	4019      	ands	r1, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	3b23      	subs	r3, #35	; 0x23
 800118a:	fa00 f203 	lsl.w	r2, r0, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	631a      	str	r2, [r3, #48]	; 0x30
 8001196:	e01b      	b.n	80011d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	3b41      	subs	r3, #65	; 0x41
 80011aa:	221f      	movs	r2, #31
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	4019      	ands	r1, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	3b41      	subs	r3, #65	; 0x41
 80011c4:	fa00 f203 	lsl.w	r2, r0, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b09      	cmp	r3, #9
 80011d6:	d91c      	bls.n	8001212 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68d9      	ldr	r1, [r3, #12]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	3b1e      	subs	r3, #30
 80011ea:	2207      	movs	r2, #7
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	4019      	ands	r1, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	6898      	ldr	r0, [r3, #8]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	3b1e      	subs	r3, #30
 8001204:	fa00 f203 	lsl.w	r2, r0, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	e019      	b.n	8001246 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6919      	ldr	r1, [r3, #16]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	2207      	movs	r2, #7
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	4019      	ands	r1, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	6898      	ldr	r0, [r3, #8]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4613      	mov	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	fa00 f203 	lsl.w	r2, r0, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b10      	cmp	r3, #16
 800124c:	d003      	beq.n	8001256 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001252:	2b11      	cmp	r3, #17
 8001254:	d132      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d125      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d126      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800127c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b10      	cmp	r3, #16
 8001284:	d11a      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800128c:	fba2 2303 	umull	r2, r3, r2, r3
 8001290:	0c9a      	lsrs	r2, r3, #18
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800129c:	e002      	b.n	80012a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f9      	bne.n	800129e <HAL_ADC_ConfigChannel+0x1b2>
 80012aa:	e007      	b.n	80012bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	f043 0220 	orr.w	r2, r3, #32
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	40012400 	.word	0x40012400
 80012d4:	20000024 	.word	0x20000024
 80012d8:	431bde83 	.word	0x431bde83

080012dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d039      	beq.n	800136e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f042 0201 	orr.w	r2, r2, #1
 8001308:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <ADC_Enable+0x9c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a1b      	ldr	r2, [pc, #108]	; (800137c <ADC_Enable+0xa0>)
 8001310:	fba2 2303 	umull	r2, r3, r2, r3
 8001314:	0c9b      	lsrs	r3, r3, #18
 8001316:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001318:	e002      	b.n	8001320 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	3b01      	subs	r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f9      	bne.n	800131a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001326:	f7ff fce3 	bl	8000cf0 <HAL_GetTick>
 800132a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800132c:	e018      	b.n	8001360 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800132e:	f7ff fcdf 	bl	8000cf0 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d911      	bls.n	8001360 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	f043 0210 	orr.w	r2, r3, #16
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	f043 0201 	orr.w	r2, r3, #1
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e007      	b.n	8001370 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b01      	cmp	r3, #1
 800136c:	d1df      	bne.n	800132e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000024 	.word	0x20000024
 800137c:	431bde83 	.word	0x431bde83

08001380 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b01      	cmp	r3, #1
 8001398:	d127      	bne.n	80013ea <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0201 	bic.w	r2, r2, #1
 80013a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013aa:	f7ff fca1 	bl	8000cf0 <HAL_GetTick>
 80013ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013b0:	e014      	b.n	80013dc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013b2:	f7ff fc9d 	bl	8000cf0 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d90d      	bls.n	80013dc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	f043 0210 	orr.w	r2, r3, #16
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d0:	f043 0201 	orr.w	r2, r3, #1
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e007      	b.n	80013ec <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d0e3      	beq.n	80013b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800140a:	2b00      	cmp	r3, #0
 800140c:	d127      	bne.n	800145e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001412:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001424:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001428:	d115      	bne.n	8001456 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800142e:	2b00      	cmp	r3, #0
 8001430:	d111      	bne.n	8001456 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d105      	bne.n	8001456 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	f043 0201 	orr.w	r2, r3, #1
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f7ff fe2c 	bl	80010b4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800145c:	e004      	b.n	8001468 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	4798      	blx	r3
}
 8001468:	bf00      	nop
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f7ff fe21 	bl	80010c6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	f043 0204 	orr.w	r2, r3, #4
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f7ff fe10 	bl	80010d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4906      	ldr	r1, [pc, #24]	; (8001510 <__NVIC_EnableIRQ+0x34>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100

08001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	; (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
         );
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015de:	f7ff ff6f 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 80015e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	6978      	ldr	r0, [r7, #20]
 80015ea:	f7ff ffbd 	bl	8001568 <NVIC_EncodePriority>
 80015ee:	4602      	mov	r2, r0
 80015f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff8c 	bl	8001514 <__NVIC_SetPriority>
}
 80015fc:	bf00      	nop
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff62 	bl	80014dc <__NVIC_EnableIRQ>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e043      	b.n	80016be <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <HAL_DMA_Init+0xa8>)
 800163e:	4413      	add	r3, r2
 8001640:	4a22      	ldr	r2, [pc, #136]	; (80016cc <HAL_DMA_Init+0xac>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	091b      	lsrs	r3, r3, #4
 8001648:	009a      	lsls	r2, r3, #2
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a1f      	ldr	r2, [pc, #124]	; (80016d0 <HAL_DMA_Init+0xb0>)
 8001652:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2202      	movs	r2, #2
 8001658:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800166a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800166e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001678:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001684:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001690:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	bffdfff8 	.word	0xbffdfff8
 80016cc:	cccccccd 	.word	0xcccccccd
 80016d0:	40020000 	.word	0x40020000

080016d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_DMA_Start_IT+0x20>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e04a      	b.n	800178a <HAL_DMA_Start_IT+0xb6>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001702:	2b01      	cmp	r3, #1
 8001704:	d13a      	bne.n	800177c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2202      	movs	r2, #2
 800170a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f000 f938 	bl	80019a0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 020e 	orr.w	r2, r2, #14
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	e00f      	b.n	800176a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0204 	bic.w	r2, r2, #4
 8001758:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 020a 	orr.w	r2, r2, #10
 8001768:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0201 	orr.w	r2, r2, #1
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	e005      	b.n	8001788 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001784:	2302      	movs	r3, #2
 8001786:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001788:	7dfb      	ldrb	r3, [r7, #23]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	2204      	movs	r2, #4
 80017b2:	409a      	lsls	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d04f      	beq.n	800185c <HAL_DMA_IRQHandler+0xc8>
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d04a      	beq.n	800185c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d107      	bne.n	80017e4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0204 	bic.w	r2, r2, #4
 80017e2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a66      	ldr	r2, [pc, #408]	; (8001984 <HAL_DMA_IRQHandler+0x1f0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d029      	beq.n	8001842 <HAL_DMA_IRQHandler+0xae>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a65      	ldr	r2, [pc, #404]	; (8001988 <HAL_DMA_IRQHandler+0x1f4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d022      	beq.n	800183e <HAL_DMA_IRQHandler+0xaa>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a63      	ldr	r2, [pc, #396]	; (800198c <HAL_DMA_IRQHandler+0x1f8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d01a      	beq.n	8001838 <HAL_DMA_IRQHandler+0xa4>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a62      	ldr	r2, [pc, #392]	; (8001990 <HAL_DMA_IRQHandler+0x1fc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d012      	beq.n	8001832 <HAL_DMA_IRQHandler+0x9e>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a60      	ldr	r2, [pc, #384]	; (8001994 <HAL_DMA_IRQHandler+0x200>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d00a      	beq.n	800182c <HAL_DMA_IRQHandler+0x98>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a5f      	ldr	r2, [pc, #380]	; (8001998 <HAL_DMA_IRQHandler+0x204>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d102      	bne.n	8001826 <HAL_DMA_IRQHandler+0x92>
 8001820:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001824:	e00e      	b.n	8001844 <HAL_DMA_IRQHandler+0xb0>
 8001826:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800182a:	e00b      	b.n	8001844 <HAL_DMA_IRQHandler+0xb0>
 800182c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001830:	e008      	b.n	8001844 <HAL_DMA_IRQHandler+0xb0>
 8001832:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001836:	e005      	b.n	8001844 <HAL_DMA_IRQHandler+0xb0>
 8001838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183c:	e002      	b.n	8001844 <HAL_DMA_IRQHandler+0xb0>
 800183e:	2340      	movs	r3, #64	; 0x40
 8001840:	e000      	b.n	8001844 <HAL_DMA_IRQHandler+0xb0>
 8001842:	2304      	movs	r3, #4
 8001844:	4a55      	ldr	r2, [pc, #340]	; (800199c <HAL_DMA_IRQHandler+0x208>)
 8001846:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 8094 	beq.w	800197a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800185a:	e08e      	b.n	800197a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	2202      	movs	r2, #2
 8001862:	409a      	lsls	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d056      	beq.n	800191a <HAL_DMA_IRQHandler+0x186>
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d051      	beq.n	800191a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10b      	bne.n	800189c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 020a 	bic.w	r2, r2, #10
 8001892:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a38      	ldr	r2, [pc, #224]	; (8001984 <HAL_DMA_IRQHandler+0x1f0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d029      	beq.n	80018fa <HAL_DMA_IRQHandler+0x166>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a37      	ldr	r2, [pc, #220]	; (8001988 <HAL_DMA_IRQHandler+0x1f4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d022      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x162>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a35      	ldr	r2, [pc, #212]	; (800198c <HAL_DMA_IRQHandler+0x1f8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d01a      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x15c>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a34      	ldr	r2, [pc, #208]	; (8001990 <HAL_DMA_IRQHandler+0x1fc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d012      	beq.n	80018ea <HAL_DMA_IRQHandler+0x156>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a32      	ldr	r2, [pc, #200]	; (8001994 <HAL_DMA_IRQHandler+0x200>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00a      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x150>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a31      	ldr	r2, [pc, #196]	; (8001998 <HAL_DMA_IRQHandler+0x204>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d102      	bne.n	80018de <HAL_DMA_IRQHandler+0x14a>
 80018d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018dc:	e00e      	b.n	80018fc <HAL_DMA_IRQHandler+0x168>
 80018de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e2:	e00b      	b.n	80018fc <HAL_DMA_IRQHandler+0x168>
 80018e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018e8:	e008      	b.n	80018fc <HAL_DMA_IRQHandler+0x168>
 80018ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ee:	e005      	b.n	80018fc <HAL_DMA_IRQHandler+0x168>
 80018f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018f4:	e002      	b.n	80018fc <HAL_DMA_IRQHandler+0x168>
 80018f6:	2320      	movs	r3, #32
 80018f8:	e000      	b.n	80018fc <HAL_DMA_IRQHandler+0x168>
 80018fa:	2302      	movs	r3, #2
 80018fc:	4a27      	ldr	r2, [pc, #156]	; (800199c <HAL_DMA_IRQHandler+0x208>)
 80018fe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	2b00      	cmp	r3, #0
 800190e:	d034      	beq.n	800197a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001918:	e02f      	b.n	800197a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	2208      	movs	r2, #8
 8001920:	409a      	lsls	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d028      	beq.n	800197c <HAL_DMA_IRQHandler+0x1e8>
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d023      	beq.n	800197c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 020e 	bic.w	r2, r2, #14
 8001942:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194c:	2101      	movs	r1, #1
 800194e:	fa01 f202 	lsl.w	r2, r1, r2
 8001952:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	2b00      	cmp	r3, #0
 8001970:	d004      	beq.n	800197c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	4798      	blx	r3
    }
  }
  return;
 800197a:	bf00      	nop
 800197c:	bf00      	nop
}
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40020008 	.word	0x40020008
 8001988:	4002001c 	.word	0x4002001c
 800198c:	40020030 	.word	0x40020030
 8001990:	40020044 	.word	0x40020044
 8001994:	40020058 	.word	0x40020058
 8001998:	4002006c 	.word	0x4002006c
 800199c:	40020000 	.word	0x40020000

080019a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b6:	2101      	movs	r1, #1
 80019b8:	fa01 f202 	lsl.w	r2, r1, r2
 80019bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d108      	bne.n	80019e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019de:	e007      	b.n	80019f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
	...

080019fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b08b      	sub	sp, #44	; 0x2c
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0e:	e127      	b.n	8001c60 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a10:	2201      	movs	r2, #1
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	f040 8116 	bne.w	8001c5a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	d034      	beq.n	8001aa0 <HAL_GPIO_Init+0xa4>
 8001a36:	2b12      	cmp	r3, #18
 8001a38:	d80d      	bhi.n	8001a56 <HAL_GPIO_Init+0x5a>
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d02b      	beq.n	8001a96 <HAL_GPIO_Init+0x9a>
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d804      	bhi.n	8001a4c <HAL_GPIO_Init+0x50>
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d031      	beq.n	8001aaa <HAL_GPIO_Init+0xae>
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d01c      	beq.n	8001a84 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a4a:	e048      	b.n	8001ade <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d043      	beq.n	8001ad8 <HAL_GPIO_Init+0xdc>
 8001a50:	2b11      	cmp	r3, #17
 8001a52:	d01b      	beq.n	8001a8c <HAL_GPIO_Init+0x90>
          break;
 8001a54:	e043      	b.n	8001ade <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a56:	4a89      	ldr	r2, [pc, #548]	; (8001c7c <HAL_GPIO_Init+0x280>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d026      	beq.n	8001aaa <HAL_GPIO_Init+0xae>
 8001a5c:	4a87      	ldr	r2, [pc, #540]	; (8001c7c <HAL_GPIO_Init+0x280>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d806      	bhi.n	8001a70 <HAL_GPIO_Init+0x74>
 8001a62:	4a87      	ldr	r2, [pc, #540]	; (8001c80 <HAL_GPIO_Init+0x284>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d020      	beq.n	8001aaa <HAL_GPIO_Init+0xae>
 8001a68:	4a86      	ldr	r2, [pc, #536]	; (8001c84 <HAL_GPIO_Init+0x288>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d01d      	beq.n	8001aaa <HAL_GPIO_Init+0xae>
          break;
 8001a6e:	e036      	b.n	8001ade <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a70:	4a85      	ldr	r2, [pc, #532]	; (8001c88 <HAL_GPIO_Init+0x28c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d019      	beq.n	8001aaa <HAL_GPIO_Init+0xae>
 8001a76:	4a85      	ldr	r2, [pc, #532]	; (8001c8c <HAL_GPIO_Init+0x290>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d016      	beq.n	8001aaa <HAL_GPIO_Init+0xae>
 8001a7c:	4a84      	ldr	r2, [pc, #528]	; (8001c90 <HAL_GPIO_Init+0x294>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d013      	beq.n	8001aaa <HAL_GPIO_Init+0xae>
          break;
 8001a82:	e02c      	b.n	8001ade <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	623b      	str	r3, [r7, #32]
          break;
 8001a8a:	e028      	b.n	8001ade <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	3304      	adds	r3, #4
 8001a92:	623b      	str	r3, [r7, #32]
          break;
 8001a94:	e023      	b.n	8001ade <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	3308      	adds	r3, #8
 8001a9c:	623b      	str	r3, [r7, #32]
          break;
 8001a9e:	e01e      	b.n	8001ade <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	330c      	adds	r3, #12
 8001aa6:	623b      	str	r3, [r7, #32]
          break;
 8001aa8:	e019      	b.n	8001ade <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	623b      	str	r3, [r7, #32]
          break;
 8001ab6:	e012      	b.n	8001ade <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d105      	bne.n	8001acc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac0:	2308      	movs	r3, #8
 8001ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	611a      	str	r2, [r3, #16]
          break;
 8001aca:	e008      	b.n	8001ade <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001acc:	2308      	movs	r3, #8
 8001ace:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	615a      	str	r2, [r3, #20]
          break;
 8001ad6:	e002      	b.n	8001ade <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
          break;
 8001adc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2bff      	cmp	r3, #255	; 0xff
 8001ae2:	d801      	bhi.n	8001ae8 <HAL_GPIO_Init+0xec>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	e001      	b.n	8001aec <HAL_GPIO_Init+0xf0>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3304      	adds	r3, #4
 8001aec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	2bff      	cmp	r3, #255	; 0xff
 8001af2:	d802      	bhi.n	8001afa <HAL_GPIO_Init+0xfe>
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	e002      	b.n	8001b00 <HAL_GPIO_Init+0x104>
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	3b08      	subs	r3, #8
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	210f      	movs	r1, #15
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	401a      	ands	r2, r3
 8001b12:	6a39      	ldr	r1, [r7, #32]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 8096 	beq.w	8001c5a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b2e:	4b59      	ldr	r3, [pc, #356]	; (8001c94 <HAL_GPIO_Init+0x298>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	4a58      	ldr	r2, [pc, #352]	; (8001c94 <HAL_GPIO_Init+0x298>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6193      	str	r3, [r2, #24]
 8001b3a:	4b56      	ldr	r3, [pc, #344]	; (8001c94 <HAL_GPIO_Init+0x298>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b46:	4a54      	ldr	r2, [pc, #336]	; (8001c98 <HAL_GPIO_Init+0x29c>)
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b52:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	4013      	ands	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4b      	ldr	r2, [pc, #300]	; (8001c9c <HAL_GPIO_Init+0x2a0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_GPIO_Init+0x19e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4a      	ldr	r2, [pc, #296]	; (8001ca0 <HAL_GPIO_Init+0x2a4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00d      	beq.n	8001b96 <HAL_GPIO_Init+0x19a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a49      	ldr	r2, [pc, #292]	; (8001ca4 <HAL_GPIO_Init+0x2a8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d007      	beq.n	8001b92 <HAL_GPIO_Init+0x196>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a48      	ldr	r2, [pc, #288]	; (8001ca8 <HAL_GPIO_Init+0x2ac>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_GPIO_Init+0x192>
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x1a0>
 8001b8e:	2304      	movs	r3, #4
 8001b90:	e004      	b.n	8001b9c <HAL_GPIO_Init+0x1a0>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e002      	b.n	8001b9c <HAL_GPIO_Init+0x1a0>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_GPIO_Init+0x1a0>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9e:	f002 0203 	and.w	r2, r2, #3
 8001ba2:	0092      	lsls	r2, r2, #2
 8001ba4:	4093      	lsls	r3, r2
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bac:	493a      	ldr	r1, [pc, #232]	; (8001c98 <HAL_GPIO_Init+0x29c>)
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	089b      	lsrs	r3, r3, #2
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bc6:	4b39      	ldr	r3, [pc, #228]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4938      	ldr	r1, [pc, #224]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]
 8001bd2:	e006      	b.n	8001be2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bd4:	4b35      	ldr	r3, [pc, #212]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	4933      	ldr	r1, [pc, #204]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d006      	beq.n	8001bfc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bee:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	492e      	ldr	r1, [pc, #184]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	604b      	str	r3, [r1, #4]
 8001bfa:	e006      	b.n	8001c0a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	4929      	ldr	r1, [pc, #164]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d006      	beq.n	8001c24 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c16:	4b25      	ldr	r3, [pc, #148]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	4924      	ldr	r1, [pc, #144]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
 8001c22:	e006      	b.n	8001c32 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c24:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	491f      	ldr	r1, [pc, #124]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d006      	beq.n	8001c4c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	491a      	ldr	r1, [pc, #104]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60cb      	str	r3, [r1, #12]
 8001c4a:	e006      	b.n	8001c5a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	4915      	ldr	r1, [pc, #84]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f47f aed0 	bne.w	8001a10 <HAL_GPIO_Init+0x14>
  }
}
 8001c70:	bf00      	nop
 8001c72:	372c      	adds	r7, #44	; 0x2c
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	10210000 	.word	0x10210000
 8001c80:	10110000 	.word	0x10110000
 8001c84:	10120000 	.word	0x10120000
 8001c88:	10310000 	.word	0x10310000
 8001c8c:	10320000 	.word	0x10320000
 8001c90:	10220000 	.word	0x10220000
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40010000 	.word	0x40010000
 8001c9c:	40010800 	.word	0x40010800
 8001ca0:	40010c00 	.word	0x40010c00
 8001ca4:	40011000 	.word	0x40011000
 8001ca8:	40011400 	.word	0x40011400
 8001cac:	40010400 	.word	0x40010400

08001cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc0:	787b      	ldrb	r3, [r7, #1]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc6:	887a      	ldrh	r2, [r7, #2]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ccc:	e003      	b.n	8001cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cce:	887b      	ldrh	r3, [r7, #2]
 8001cd0:	041a      	lsls	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	611a      	str	r2, [r3, #16]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	887b      	ldrh	r3, [r7, #2]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cf8:	887a      	ldrh	r2, [r7, #2]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001cfe:	e002      	b.n	8001d06 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d00:	887a      	ldrh	r2, [r7, #2]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	611a      	str	r2, [r3, #16]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e10f      	b.n	8001f42 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d106      	bne.n	8001d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7fe fe62 	bl	8000a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2224      	movs	r2, #36	; 0x24
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0201 	bic.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d54:	f000 ffd4 	bl	8002d00 <HAL_RCC_GetPCLK1Freq>
 8001d58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4a7b      	ldr	r2, [pc, #492]	; (8001f4c <HAL_I2C_Init+0x23c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d807      	bhi.n	8001d74 <HAL_I2C_Init+0x64>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4a7a      	ldr	r2, [pc, #488]	; (8001f50 <HAL_I2C_Init+0x240>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	bf94      	ite	ls
 8001d6c:	2301      	movls	r3, #1
 8001d6e:	2300      	movhi	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	e006      	b.n	8001d82 <HAL_I2C_Init+0x72>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4a77      	ldr	r2, [pc, #476]	; (8001f54 <HAL_I2C_Init+0x244>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	bf94      	ite	ls
 8001d7c:	2301      	movls	r3, #1
 8001d7e:	2300      	movhi	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0db      	b.n	8001f42 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4a72      	ldr	r2, [pc, #456]	; (8001f58 <HAL_I2C_Init+0x248>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	0c9b      	lsrs	r3, r3, #18
 8001d94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4a64      	ldr	r2, [pc, #400]	; (8001f4c <HAL_I2C_Init+0x23c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d802      	bhi.n	8001dc4 <HAL_I2C_Init+0xb4>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	e009      	b.n	8001dd8 <HAL_I2C_Init+0xc8>
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dca:	fb02 f303 	mul.w	r3, r2, r3
 8001dce:	4a63      	ldr	r2, [pc, #396]	; (8001f5c <HAL_I2C_Init+0x24c>)
 8001dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd4:	099b      	lsrs	r3, r3, #6
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4956      	ldr	r1, [pc, #344]	; (8001f4c <HAL_I2C_Init+0x23c>)
 8001df4:	428b      	cmp	r3, r1
 8001df6:	d80d      	bhi.n	8001e14 <HAL_I2C_Init+0x104>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	1e59      	subs	r1, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e06:	3301      	adds	r3, #1
 8001e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	bf38      	it	cc
 8001e10:	2304      	movcc	r3, #4
 8001e12:	e04f      	b.n	8001eb4 <HAL_I2C_Init+0x1a4>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d111      	bne.n	8001e40 <HAL_I2C_Init+0x130>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	1e58      	subs	r0, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6859      	ldr	r1, [r3, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	440b      	add	r3, r1
 8001e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	e012      	b.n	8001e66 <HAL_I2C_Init+0x156>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1e58      	subs	r0, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6859      	ldr	r1, [r3, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	0099      	lsls	r1, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e56:	3301      	adds	r3, #1
 8001e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_Init+0x15e>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e022      	b.n	8001eb4 <HAL_I2C_Init+0x1a4>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10e      	bne.n	8001e94 <HAL_I2C_Init+0x184>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1e58      	subs	r0, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6859      	ldr	r1, [r3, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	440b      	add	r3, r1
 8001e84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e88:	3301      	adds	r3, #1
 8001e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e92:	e00f      	b.n	8001eb4 <HAL_I2C_Init+0x1a4>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1e58      	subs	r0, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	0099      	lsls	r1, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	6809      	ldr	r1, [r1, #0]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69da      	ldr	r2, [r3, #28]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ee2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6911      	ldr	r1, [r2, #16]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68d2      	ldr	r2, [r2, #12]
 8001eee:	4311      	orrs	r1, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	000186a0 	.word	0x000186a0
 8001f50:	001e847f 	.word	0x001e847f
 8001f54:	003d08ff 	.word	0x003d08ff
 8001f58:	431bde83 	.word	0x431bde83
 8001f5c:	10624dd3 	.word	0x10624dd3

08001f60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	817b      	strh	r3, [r7, #10]
 8001f70:	4613      	mov	r3, r2
 8001f72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f74:	f7fe febc 	bl	8000cf0 <HAL_GetTick>
 8001f78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	f040 80e0 	bne.w	8002148 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	2319      	movs	r3, #25
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4970      	ldr	r1, [pc, #448]	; (8002154 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f958 	bl	8002248 <I2C_WaitOnFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e0d3      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d101      	bne.n	8001fb0 <HAL_I2C_Master_Transmit+0x50>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e0cc      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d007      	beq.n	8001fd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0201 	orr.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2221      	movs	r2, #33	; 0x21
 8001fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	893a      	ldrh	r2, [r7, #8]
 8002006:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4a50      	ldr	r2, [pc, #320]	; (8002158 <HAL_I2C_Master_Transmit+0x1f8>)
 8002016:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002018:	8979      	ldrh	r1, [r7, #10]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	6a3a      	ldr	r2, [r7, #32]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f89c 	bl	800215c <I2C_MasterRequestWrite>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e08d      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002044:	e066      	b.n	8002114 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	6a39      	ldr	r1, [r7, #32]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f9d2 	bl	80023f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00d      	beq.n	8002072 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2b04      	cmp	r3, #4
 800205c:	d107      	bne.n	800206e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e06b      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	781a      	ldrb	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d11b      	bne.n	80020e8 <HAL_I2C_Master_Transmit+0x188>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d017      	beq.n	80020e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	6a39      	ldr	r1, [r7, #32]
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 f9c2 	bl	8002476 <I2C_WaitOnBTFFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00d      	beq.n	8002114 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d107      	bne.n	8002110 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e01a      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	2b00      	cmp	r3, #0
 800211a:	d194      	bne.n	8002046 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800212a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e000      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002148:	2302      	movs	r3, #2
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	00100002 	.word	0x00100002
 8002158:	ffff0000 	.word	0xffff0000

0800215c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af02      	add	r7, sp, #8
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	460b      	mov	r3, r1
 800216a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b08      	cmp	r3, #8
 8002176:	d006      	beq.n	8002186 <I2C_MasterRequestWrite+0x2a>
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d003      	beq.n	8002186 <I2C_MasterRequestWrite+0x2a>
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002184:	d108      	bne.n	8002198 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	e00b      	b.n	80021b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	2b12      	cmp	r3, #18
 800219e:	d107      	bne.n	80021b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 f843 	bl	8002248 <I2C_WaitOnFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e035      	b.n	8002238 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021d4:	d108      	bne.n	80021e8 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021d6:	897b      	ldrh	r3, [r7, #10]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021e4:	611a      	str	r2, [r3, #16]
 80021e6:	e01b      	b.n	8002220 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021e8:	897b      	ldrh	r3, [r7, #10]
 80021ea:	11db      	asrs	r3, r3, #7
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 0306 	and.w	r3, r3, #6
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f063 030f 	orn	r3, r3, #15
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	490e      	ldr	r1, [pc, #56]	; (8002240 <I2C_MasterRequestWrite+0xe4>)
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f875 	bl	80022f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e010      	b.n	8002238 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002216:	897b      	ldrh	r3, [r7, #10]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	4907      	ldr	r1, [pc, #28]	; (8002244 <I2C_MasterRequestWrite+0xe8>)
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 f865 	bl	80022f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	00010008 	.word	0x00010008
 8002244:	00010002 	.word	0x00010002

08002248 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002258:	e025      	b.n	80022a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d021      	beq.n	80022a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002262:	f7fe fd45 	bl	8000cf0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d302      	bcc.n	8002278 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d116      	bne.n	80022a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f043 0220 	orr.w	r2, r3, #32
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e023      	b.n	80022ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	0c1b      	lsrs	r3, r3, #16
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d10d      	bne.n	80022cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	43da      	mvns	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4013      	ands	r3, r2
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	bf0c      	ite	eq
 80022c2:	2301      	moveq	r3, #1
 80022c4:	2300      	movne	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	e00c      	b.n	80022e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4013      	ands	r3, r2
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bf0c      	ite	eq
 80022de:	2301      	moveq	r3, #1
 80022e0:	2300      	movne	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d0b6      	beq.n	800225a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002304:	e051      	b.n	80023aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002314:	d123      	bne.n	800235e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002324:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800232e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f043 0204 	orr.w	r2, r3, #4
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e046      	b.n	80023ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d021      	beq.n	80023aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002366:	f7fe fcc3 	bl	8000cf0 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	d302      	bcc.n	800237c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d116      	bne.n	80023aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f043 0220 	orr.w	r2, r3, #32
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e020      	b.n	80023ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d10c      	bne.n	80023ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	43da      	mvns	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4013      	ands	r3, r2
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	bf14      	ite	ne
 80023c6:	2301      	movne	r3, #1
 80023c8:	2300      	moveq	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	e00b      	b.n	80023e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	43da      	mvns	r2, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	4013      	ands	r3, r2
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bf14      	ite	ne
 80023e0:	2301      	movne	r3, #1
 80023e2:	2300      	moveq	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d18d      	bne.n	8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002400:	e02d      	b.n	800245e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f878 	bl	80024f8 <I2C_IsAcknowledgeFailed>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e02d      	b.n	800246e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002418:	d021      	beq.n	800245e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241a:	f7fe fc69 	bl	8000cf0 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	429a      	cmp	r2, r3
 8002428:	d302      	bcc.n	8002430 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d116      	bne.n	800245e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f043 0220 	orr.w	r2, r3, #32
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e007      	b.n	800246e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002468:	2b80      	cmp	r3, #128	; 0x80
 800246a:	d1ca      	bne.n	8002402 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002482:	e02d      	b.n	80024e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f837 	bl	80024f8 <I2C_IsAcknowledgeFailed>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e02d      	b.n	80024f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249a:	d021      	beq.n	80024e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249c:	f7fe fc28 	bl	8000cf0 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d302      	bcc.n	80024b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d116      	bne.n	80024e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	f043 0220 	orr.w	r2, r3, #32
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e007      	b.n	80024f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d1ca      	bne.n	8002484 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250e:	d11b      	bne.n	8002548 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002518:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f043 0204 	orr.w	r2, r3, #4
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e26c      	b.n	8002a40 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8087 	beq.w	8002682 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002574:	4b92      	ldr	r3, [pc, #584]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b04      	cmp	r3, #4
 800257e:	d00c      	beq.n	800259a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002580:	4b8f      	ldr	r3, [pc, #572]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b08      	cmp	r3, #8
 800258a:	d112      	bne.n	80025b2 <HAL_RCC_OscConfig+0x5e>
 800258c:	4b8c      	ldr	r3, [pc, #560]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002598:	d10b      	bne.n	80025b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259a:	4b89      	ldr	r3, [pc, #548]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d06c      	beq.n	8002680 <HAL_RCC_OscConfig+0x12c>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d168      	bne.n	8002680 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e246      	b.n	8002a40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ba:	d106      	bne.n	80025ca <HAL_RCC_OscConfig+0x76>
 80025bc:	4b80      	ldr	r3, [pc, #512]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a7f      	ldr	r2, [pc, #508]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	e02e      	b.n	8002628 <HAL_RCC_OscConfig+0xd4>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x98>
 80025d2:	4b7b      	ldr	r3, [pc, #492]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7a      	ldr	r2, [pc, #488]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	4b78      	ldr	r3, [pc, #480]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a77      	ldr	r2, [pc, #476]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e01d      	b.n	8002628 <HAL_RCC_OscConfig+0xd4>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0xbc>
 80025f6:	4b72      	ldr	r3, [pc, #456]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a71      	ldr	r2, [pc, #452]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b6f      	ldr	r3, [pc, #444]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a6e      	ldr	r2, [pc, #440]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e00b      	b.n	8002628 <HAL_RCC_OscConfig+0xd4>
 8002610:	4b6b      	ldr	r3, [pc, #428]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a6a      	ldr	r2, [pc, #424]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b68      	ldr	r3, [pc, #416]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a67      	ldr	r2, [pc, #412]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002626:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fb5e 	bl	8000cf0 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002638:	f7fe fb5a 	bl	8000cf0 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	; 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e1fa      	b.n	8002a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b5d      	ldr	r3, [pc, #372]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0xe4>
 8002656:	e014      	b.n	8002682 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe fb4a 	bl	8000cf0 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002660:	f7fe fb46 	bl	8000cf0 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	; 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e1e6      	b.n	8002a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	4b53      	ldr	r3, [pc, #332]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x10c>
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d063      	beq.n	8002756 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800268e:	4b4c      	ldr	r3, [pc, #304]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800269a:	4b49      	ldr	r3, [pc, #292]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d11c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x18c>
 80026a6:	4b46      	ldr	r3, [pc, #280]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d116      	bne.n	80026e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_RCC_OscConfig+0x176>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e1ba      	b.n	8002a40 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4939      	ldr	r1, [pc, #228]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	e03a      	b.n	8002756 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d020      	beq.n	800272a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e8:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7fe faff 	bl	8000cf0 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f6:	f7fe fafb 	bl	8000cf0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e19b      	b.n	8002a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002708:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002714:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4927      	ldr	r1, [pc, #156]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]
 8002728:	e015      	b.n	8002756 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272a:	4b26      	ldr	r3, [pc, #152]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe fade 	bl	8000cf0 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002738:	f7fe fada 	bl	8000cf0 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e17a      	b.n	8002a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d03a      	beq.n	80027d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d019      	beq.n	800279e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <HAL_RCC_OscConfig+0x274>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002770:	f7fe fabe 	bl	8000cf0 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002778:	f7fe faba 	bl	8000cf0 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e15a      	b.n	8002a40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278a:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002796:	2001      	movs	r0, #1
 8002798:	f000 fb0a 	bl	8002db0 <RCC_Delay>
 800279c:	e01c      	b.n	80027d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <HAL_RCC_OscConfig+0x274>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a4:	f7fe faa4 	bl	8000cf0 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027aa:	e00f      	b.n	80027cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ac:	f7fe faa0 	bl	8000cf0 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d908      	bls.n	80027cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e140      	b.n	8002a40 <HAL_RCC_OscConfig+0x4ec>
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
 80027c4:	42420000 	.word	0x42420000
 80027c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027cc:	4b9e      	ldr	r3, [pc, #632]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1e9      	bne.n	80027ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80a6 	beq.w	8002932 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e6:	2300      	movs	r3, #0
 80027e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ea:	4b97      	ldr	r3, [pc, #604]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10d      	bne.n	8002812 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f6:	4b94      	ldr	r3, [pc, #592]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4a93      	ldr	r2, [pc, #588]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 80027fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002800:	61d3      	str	r3, [r2, #28]
 8002802:	4b91      	ldr	r3, [pc, #580]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800280e:	2301      	movs	r3, #1
 8002810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002812:	4b8e      	ldr	r3, [pc, #568]	; (8002a4c <HAL_RCC_OscConfig+0x4f8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281a:	2b00      	cmp	r3, #0
 800281c:	d118      	bne.n	8002850 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800281e:	4b8b      	ldr	r3, [pc, #556]	; (8002a4c <HAL_RCC_OscConfig+0x4f8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a8a      	ldr	r2, [pc, #552]	; (8002a4c <HAL_RCC_OscConfig+0x4f8>)
 8002824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800282a:	f7fe fa61 	bl	8000cf0 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002832:	f7fe fa5d 	bl	8000cf0 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b64      	cmp	r3, #100	; 0x64
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e0fd      	b.n	8002a40 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002844:	4b81      	ldr	r3, [pc, #516]	; (8002a4c <HAL_RCC_OscConfig+0x4f8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d106      	bne.n	8002866 <HAL_RCC_OscConfig+0x312>
 8002858:	4b7b      	ldr	r3, [pc, #492]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	4a7a      	ldr	r2, [pc, #488]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6213      	str	r3, [r2, #32]
 8002864:	e02d      	b.n	80028c2 <HAL_RCC_OscConfig+0x36e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0x334>
 800286e:	4b76      	ldr	r3, [pc, #472]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4a75      	ldr	r2, [pc, #468]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	6213      	str	r3, [r2, #32]
 800287a:	4b73      	ldr	r3, [pc, #460]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4a72      	ldr	r2, [pc, #456]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 8002880:	f023 0304 	bic.w	r3, r3, #4
 8002884:	6213      	str	r3, [r2, #32]
 8002886:	e01c      	b.n	80028c2 <HAL_RCC_OscConfig+0x36e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b05      	cmp	r3, #5
 800288e:	d10c      	bne.n	80028aa <HAL_RCC_OscConfig+0x356>
 8002890:	4b6d      	ldr	r3, [pc, #436]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4a6c      	ldr	r2, [pc, #432]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 8002896:	f043 0304 	orr.w	r3, r3, #4
 800289a:	6213      	str	r3, [r2, #32]
 800289c:	4b6a      	ldr	r3, [pc, #424]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	4a69      	ldr	r2, [pc, #420]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6213      	str	r3, [r2, #32]
 80028a8:	e00b      	b.n	80028c2 <HAL_RCC_OscConfig+0x36e>
 80028aa:	4b67      	ldr	r3, [pc, #412]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4a66      	ldr	r2, [pc, #408]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	6213      	str	r3, [r2, #32]
 80028b6:	4b64      	ldr	r3, [pc, #400]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4a63      	ldr	r2, [pc, #396]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	f023 0304 	bic.w	r3, r3, #4
 80028c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d015      	beq.n	80028f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ca:	f7fe fa11 	bl	8000cf0 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d0:	e00a      	b.n	80028e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d2:	f7fe fa0d 	bl	8000cf0 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e0ab      	b.n	8002a40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e8:	4b57      	ldr	r3, [pc, #348]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0ee      	beq.n	80028d2 <HAL_RCC_OscConfig+0x37e>
 80028f4:	e014      	b.n	8002920 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f6:	f7fe f9fb 	bl	8000cf0 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7fe f9f7 	bl	8000cf0 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f241 3288 	movw	r2, #5000	; 0x1388
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e095      	b.n	8002a40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002914:	4b4c      	ldr	r3, [pc, #304]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ee      	bne.n	80028fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002920:	7dfb      	ldrb	r3, [r7, #23]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d105      	bne.n	8002932 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002926:	4b48      	ldr	r3, [pc, #288]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	4a47      	ldr	r2, [pc, #284]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 800292c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002930:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8081 	beq.w	8002a3e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800293c:	4b42      	ldr	r3, [pc, #264]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b08      	cmp	r3, #8
 8002946:	d061      	beq.n	8002a0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d146      	bne.n	80029de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002950:	4b3f      	ldr	r3, [pc, #252]	; (8002a50 <HAL_RCC_OscConfig+0x4fc>)
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7fe f9cb 	bl	8000cf0 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295e:	f7fe f9c7 	bl	8000cf0 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e067      	b.n	8002a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002970:	4b35      	ldr	r3, [pc, #212]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f0      	bne.n	800295e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002984:	d108      	bne.n	8002998 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002986:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	492d      	ldr	r1, [pc, #180]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a19      	ldr	r1, [r3, #32]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	430b      	orrs	r3, r1
 80029aa:	4927      	ldr	r1, [pc, #156]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b0:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_RCC_OscConfig+0x4fc>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b6:	f7fe f99b 	bl	8000cf0 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029be:	f7fe f997 	bl	8000cf0 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e037      	b.n	8002a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x46a>
 80029dc:	e02f      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <HAL_RCC_OscConfig+0x4fc>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7fe f984 	bl	8000cf0 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ec:	f7fe f980 	bl	8000cf0 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e020      	b.n	8002a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x498>
 8002a0a:	e018      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e013      	b.n	8002a40 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_OscConfig+0x4f4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d106      	bne.n	8002a3a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d001      	beq.n	8002a3e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	42420060 	.word	0x42420060

08002a54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0d0      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a68:	4b6a      	ldr	r3, [pc, #424]	; (8002c14 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d910      	bls.n	8002a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a76:	4b67      	ldr	r3, [pc, #412]	; (8002c14 <HAL_RCC_ClockConfig+0x1c0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 0207 	bic.w	r2, r3, #7
 8002a7e:	4965      	ldr	r1, [pc, #404]	; (8002c14 <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a86:	4b63      	ldr	r3, [pc, #396]	; (8002c14 <HAL_RCC_ClockConfig+0x1c0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0b8      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d020      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab0:	4b59      	ldr	r3, [pc, #356]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4a58      	ldr	r2, [pc, #352]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac8:	4b53      	ldr	r3, [pc, #332]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a52      	ldr	r2, [pc, #328]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ad2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad4:	4b50      	ldr	r3, [pc, #320]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	494d      	ldr	r1, [pc, #308]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d040      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	4b47      	ldr	r3, [pc, #284]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d115      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e07f      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d107      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b12:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e073      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b22:	4b3d      	ldr	r3, [pc, #244]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e06b      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b32:	4b39      	ldr	r3, [pc, #228]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f023 0203 	bic.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4936      	ldr	r1, [pc, #216]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b44:	f7fe f8d4 	bl	8000cf0 <HAL_GetTick>
 8002b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4c:	f7fe f8d0 	bl	8000cf0 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e053      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	4b2d      	ldr	r3, [pc, #180]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 020c 	and.w	r2, r3, #12
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d1eb      	bne.n	8002b4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b74:	4b27      	ldr	r3, [pc, #156]	; (8002c14 <HAL_RCC_ClockConfig+0x1c0>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d210      	bcs.n	8002ba4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 0207 	bic.w	r2, r3, #7
 8002b8a:	4922      	ldr	r1, [pc, #136]	; (8002c14 <HAL_RCC_ClockConfig+0x1c0>)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b92:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <HAL_RCC_ClockConfig+0x1c0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e032      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb0:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4916      	ldr	r1, [pc, #88]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bce:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	490e      	ldr	r1, [pc, #56]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002be2:	f000 f821 	bl	8002c28 <HAL_RCC_GetSysClockFreq>
 8002be6:	4601      	mov	r1, r0
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002bf4:	5cd3      	ldrb	r3, [r2, r3]
 8002bf6:	fa21 f303 	lsr.w	r3, r1, r3
 8002bfa:	4a09      	ldr	r2, [pc, #36]	; (8002c20 <HAL_RCC_ClockConfig+0x1cc>)
 8002bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <HAL_RCC_ClockConfig+0x1d0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd ff86 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40022000 	.word	0x40022000
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	08005b18 	.word	0x08005b18
 8002c20:	20000024 	.word	0x20000024
 8002c24:	20000028 	.word	0x20000028

08002c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c28:	b490      	push	{r4, r7}
 8002c2a:	b08a      	sub	sp, #40	; 0x28
 8002c2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c2e:	4b2a      	ldr	r3, [pc, #168]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c30:	1d3c      	adds	r4, r7, #4
 8002c32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	2300      	movs	r3, #0
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c52:	4b23      	ldr	r3, [pc, #140]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d002      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x40>
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d003      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0x46>
 8002c66:	e02d      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c68:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c6a:	623b      	str	r3, [r7, #32]
      break;
 8002c6c:	e02d      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	0c9b      	lsrs	r3, r3, #18
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	0c5b      	lsrs	r3, r3, #17
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ca0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	4a0f      	ldr	r2, [pc, #60]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ca6:	fb02 f203 	mul.w	r2, r2, r3
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb2:	e004      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cb8:	fb02 f303 	mul.w	r3, r2, r3
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	623b      	str	r3, [r7, #32]
      break;
 8002cc2:	e002      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cc6:	623b      	str	r3, [r7, #32]
      break;
 8002cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cca:	6a3b      	ldr	r3, [r7, #32]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3728      	adds	r7, #40	; 0x28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc90      	pop	{r4, r7}
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	08005afc 	.word	0x08005afc
 8002cdc:	08005b0c 	.word	0x08005b0c
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	007a1200 	.word	0x007a1200
 8002ce8:	003d0900 	.word	0x003d0900

08002cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf0:	4b02      	ldr	r3, [pc, #8]	; (8002cfc <HAL_RCC_GetHCLKFreq+0x10>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	20000024 	.word	0x20000024

08002d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d04:	f7ff fff2 	bl	8002cec <HAL_RCC_GetHCLKFreq>
 8002d08:	4601      	mov	r1, r0
 8002d0a:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	4a03      	ldr	r2, [pc, #12]	; (8002d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d16:	5cd3      	ldrb	r3, [r2, r3]
 8002d18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000
 8002d24:	08005b28 	.word	0x08005b28

08002d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d2c:	f7ff ffde 	bl	8002cec <HAL_RCC_GetHCLKFreq>
 8002d30:	4601      	mov	r1, r0
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	0adb      	lsrs	r3, r3, #11
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	4a03      	ldr	r2, [pc, #12]	; (8002d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
 8002d40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	08005b28 	.word	0x08005b28

08002d50 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	220f      	movs	r2, #15
 8002d5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_RCC_GetClockConfig+0x58>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0203 	and.w	r2, r3, #3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HAL_RCC_GetClockConfig+0x58>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_RCC_GetClockConfig+0x58>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <HAL_RCC_GetClockConfig+0x58>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	08db      	lsrs	r3, r3, #3
 8002d8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_GetClockConfig+0x5c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0207 	and.w	r2, r3, #7
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40022000 	.word	0x40022000

08002db0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002db8:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <RCC_Delay+0x34>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <RCC_Delay+0x38>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	0a5b      	lsrs	r3, r3, #9
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dcc:	bf00      	nop
  }
  while (Delay --);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1e5a      	subs	r2, r3, #1
 8002dd2:	60fa      	str	r2, [r7, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f9      	bne.n	8002dcc <RCC_Delay+0x1c>
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000024 	.word	0x20000024
 8002de8:	10624dd3 	.word	0x10624dd3

08002dec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d07d      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0c:	4b4f      	ldr	r3, [pc, #316]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10d      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e18:	4b4c      	ldr	r3, [pc, #304]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	4a4b      	ldr	r2, [pc, #300]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e22:	61d3      	str	r3, [r2, #28]
 8002e24:	4b49      	ldr	r3, [pc, #292]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e30:	2301      	movs	r3, #1
 8002e32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e34:	4b46      	ldr	r3, [pc, #280]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d118      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e40:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a42      	ldr	r2, [pc, #264]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4c:	f7fd ff50 	bl	8000cf0 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e52:	e008      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e54:	f7fd ff4c 	bl	8000cf0 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e06d      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b3a      	ldr	r3, [pc, #232]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e72:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d02e      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d027      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e90:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e9a:	4b2e      	ldr	r3, [pc, #184]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea0:	4b2c      	ldr	r3, [pc, #176]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ea6:	4a29      	ldr	r2, [pc, #164]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d014      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb6:	f7fd ff1b 	bl	8000cf0 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7fd ff17 	bl	8000cf0 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e036      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0ee      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ee0:	4b1a      	ldr	r3, [pc, #104]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4917      	ldr	r1, [pc, #92]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d105      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	490b      	ldr	r1, [pc, #44]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	4904      	ldr	r1, [pc, #16]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40007000 	.word	0x40007000
 8002f54:	42420440 	.word	0x42420440

08002f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e01d      	b.n	8002fa6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f815 	bl	8002fae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3304      	adds	r3, #4
 8002f94:	4619      	mov	r1, r3
 8002f96:	4610      	mov	r0, r2
 8002f98:	f000 f962 	bl	8003260 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b06      	cmp	r3, #6
 8002fe8:	d007      	beq.n	8002ffa <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr

08003006 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b02      	cmp	r3, #2
 800301a:	d122      	bne.n	8003062 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b02      	cmp	r3, #2
 8003028:	d11b      	bne.n	8003062 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f06f 0202 	mvn.w	r2, #2
 8003032:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f8ed 	bl	8003228 <HAL_TIM_IC_CaptureCallback>
 800304e:	e005      	b.n	800305c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f8e0 	bl	8003216 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f8ef 	bl	800323a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b04      	cmp	r3, #4
 800306e:	d122      	bne.n	80030b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b04      	cmp	r3, #4
 800307c:	d11b      	bne.n	80030b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f06f 0204 	mvn.w	r2, #4
 8003086:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f8c3 	bl	8003228 <HAL_TIM_IC_CaptureCallback>
 80030a2:	e005      	b.n	80030b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f8b6 	bl	8003216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f8c5 	bl	800323a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d122      	bne.n	800310a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d11b      	bne.n	800310a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f06f 0208 	mvn.w	r2, #8
 80030da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2204      	movs	r2, #4
 80030e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f899 	bl	8003228 <HAL_TIM_IC_CaptureCallback>
 80030f6:	e005      	b.n	8003104 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f88c 	bl	8003216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f89b 	bl	800323a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b10      	cmp	r3, #16
 8003116:	d122      	bne.n	800315e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b10      	cmp	r3, #16
 8003124:	d11b      	bne.n	800315e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f06f 0210 	mvn.w	r2, #16
 800312e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2208      	movs	r2, #8
 8003134:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f86f 	bl	8003228 <HAL_TIM_IC_CaptureCallback>
 800314a:	e005      	b.n	8003158 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f862 	bl	8003216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f871 	bl	800323a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b01      	cmp	r3, #1
 800316a:	d10e      	bne.n	800318a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d107      	bne.n	800318a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f06f 0201 	mvn.w	r2, #1
 8003182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7fd fbbb 	bl	8000900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003194:	2b80      	cmp	r3, #128	; 0x80
 8003196:	d10e      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a2:	2b80      	cmp	r3, #128	; 0x80
 80031a4:	d107      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f8c0 	bl	8003336 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	d10e      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ce:	2b40      	cmp	r3, #64	; 0x40
 80031d0:	d107      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f835 	bl	800324c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d10e      	bne.n	800320e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d107      	bne.n	800320e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f06f 0220 	mvn.w	r2, #32
 8003206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f88b 	bl	8003324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr

0800323a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
	...

08003260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a29      	ldr	r2, [pc, #164]	; (8003318 <TIM_Base_SetConfig+0xb8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00b      	beq.n	8003290 <TIM_Base_SetConfig+0x30>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327e:	d007      	beq.n	8003290 <TIM_Base_SetConfig+0x30>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a26      	ldr	r2, [pc, #152]	; (800331c <TIM_Base_SetConfig+0xbc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <TIM_Base_SetConfig+0x30>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a25      	ldr	r2, [pc, #148]	; (8003320 <TIM_Base_SetConfig+0xc0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d108      	bne.n	80032a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a1c      	ldr	r2, [pc, #112]	; (8003318 <TIM_Base_SetConfig+0xb8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00b      	beq.n	80032c2 <TIM_Base_SetConfig+0x62>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b0:	d007      	beq.n	80032c2 <TIM_Base_SetConfig+0x62>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a19      	ldr	r2, [pc, #100]	; (800331c <TIM_Base_SetConfig+0xbc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d003      	beq.n	80032c2 <TIM_Base_SetConfig+0x62>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a18      	ldr	r2, [pc, #96]	; (8003320 <TIM_Base_SetConfig+0xc0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d108      	bne.n	80032d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a07      	ldr	r2, [pc, #28]	; (8003318 <TIM_Base_SetConfig+0xb8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d103      	bne.n	8003308 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	615a      	str	r2, [r3, #20]
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800

08003324 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr

08003336 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e03f      	b.n	80033da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fd fb84 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2224      	movs	r2, #36	; 0x24
 8003378:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800338a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f90b 	bl	80035a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695a      	ldr	r2, [r3, #20]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b088      	sub	sp, #32
 80033e6:	af02      	add	r7, sp, #8
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	603b      	str	r3, [r7, #0]
 80033ee:	4613      	mov	r3, r2
 80033f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b20      	cmp	r3, #32
 8003400:	f040 8083 	bne.w	800350a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <HAL_UART_Transmit+0x2e>
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e07b      	b.n	800350c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_UART_Transmit+0x40>
 800341e:	2302      	movs	r3, #2
 8003420:	e074      	b.n	800350c <HAL_UART_Transmit+0x12a>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2221      	movs	r2, #33	; 0x21
 8003434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003438:	f7fd fc5a 	bl	8000cf0 <HAL_GetTick>
 800343c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	88fa      	ldrh	r2, [r7, #6]
 8003442:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	88fa      	ldrh	r2, [r7, #6]
 8003448:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800344a:	e042      	b.n	80034d2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003462:	d122      	bne.n	80034aa <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2200      	movs	r2, #0
 800346c:	2180      	movs	r1, #128	; 0x80
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f850 	bl	8003514 <UART_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e046      	b.n	800350c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003490:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d103      	bne.n	80034a2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	3302      	adds	r3, #2
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	e017      	b.n	80034d2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	3301      	adds	r3, #1
 80034a6:	60bb      	str	r3, [r7, #8]
 80034a8:	e013      	b.n	80034d2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2200      	movs	r2, #0
 80034b2:	2180      	movs	r1, #128	; 0x80
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f82d 	bl	8003514 <UART_WaitOnFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e023      	b.n	800350c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	60ba      	str	r2, [r7, #8]
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1b7      	bne.n	800344c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2200      	movs	r2, #0
 80034e4:	2140      	movs	r1, #64	; 0x40
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f814 	bl	8003514 <UART_WaitOnFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e00a      	b.n	800350c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	e000      	b.n	800350c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800350a:	2302      	movs	r3, #2
  }
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003524:	e02c      	b.n	8003580 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352c:	d028      	beq.n	8003580 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d007      	beq.n	8003544 <UART_WaitOnFlagUntilTimeout+0x30>
 8003534:	f7fd fbdc 	bl	8000cf0 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	429a      	cmp	r2, r3
 8003542:	d21d      	bcs.n	8003580 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003552:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0201 	bic.w	r2, r2, #1
 8003562:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e00f      	b.n	80035a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	4013      	ands	r3, r2
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	429a      	cmp	r2, r3
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	429a      	cmp	r2, r3
 800359c:	d0c3      	beq.n	8003526 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035e2:	f023 030c 	bic.w	r3, r3, #12
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	68f9      	ldr	r1, [r7, #12]
 80035ec:	430b      	orrs	r3, r1
 80035ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a52      	ldr	r2, [pc, #328]	; (8003754 <UART_SetConfig+0x1ac>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d14e      	bne.n	80036ae <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003610:	f7ff fb8a 	bl	8002d28 <HAL_RCC_GetPCLK2Freq>
 8003614:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	009a      	lsls	r2, r3, #2
 8003620:	441a      	add	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	4a4a      	ldr	r2, [pc, #296]	; (8003758 <UART_SetConfig+0x1b0>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	0119      	lsls	r1, r3, #4
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	009a      	lsls	r2, r3, #2
 8003640:	441a      	add	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	fbb2 f2f3 	udiv	r2, r2, r3
 800364c:	4b42      	ldr	r3, [pc, #264]	; (8003758 <UART_SetConfig+0x1b0>)
 800364e:	fba3 0302 	umull	r0, r3, r3, r2
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2064      	movs	r0, #100	; 0x64
 8003656:	fb00 f303 	mul.w	r3, r0, r3
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	3332      	adds	r3, #50	; 0x32
 8003660:	4a3d      	ldr	r2, [pc, #244]	; (8003758 <UART_SetConfig+0x1b0>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800366c:	4419      	add	r1, r3
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009a      	lsls	r2, r3, #2
 8003678:	441a      	add	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	fbb2 f2f3 	udiv	r2, r2, r3
 8003684:	4b34      	ldr	r3, [pc, #208]	; (8003758 <UART_SetConfig+0x1b0>)
 8003686:	fba3 0302 	umull	r0, r3, r3, r2
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	2064      	movs	r0, #100	; 0x64
 800368e:	fb00 f303 	mul.w	r3, r0, r3
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	3332      	adds	r3, #50	; 0x32
 8003698:	4a2f      	ldr	r2, [pc, #188]	; (8003758 <UART_SetConfig+0x1b0>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	f003 020f 	and.w	r2, r3, #15
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	440a      	add	r2, r1
 80036aa:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80036ac:	e04d      	b.n	800374a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80036ae:	f7ff fb27 	bl	8002d00 <HAL_RCC_GetPCLK1Freq>
 80036b2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	009a      	lsls	r2, r3, #2
 80036be:	441a      	add	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ca:	4a23      	ldr	r2, [pc, #140]	; (8003758 <UART_SetConfig+0x1b0>)
 80036cc:	fba2 2303 	umull	r2, r3, r2, r3
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	0119      	lsls	r1, r3, #4
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	009a      	lsls	r2, r3, #2
 80036de:	441a      	add	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80036ea:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <UART_SetConfig+0x1b0>)
 80036ec:	fba3 0302 	umull	r0, r3, r3, r2
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	2064      	movs	r0, #100	; 0x64
 80036f4:	fb00 f303 	mul.w	r3, r0, r3
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	3332      	adds	r3, #50	; 0x32
 80036fe:	4a16      	ldr	r2, [pc, #88]	; (8003758 <UART_SetConfig+0x1b0>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800370a:	4419      	add	r1, r3
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	009a      	lsls	r2, r3, #2
 8003716:	441a      	add	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <UART_SetConfig+0x1b0>)
 8003724:	fba3 0302 	umull	r0, r3, r3, r2
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	2064      	movs	r0, #100	; 0x64
 800372c:	fb00 f303 	mul.w	r3, r0, r3
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	3332      	adds	r3, #50	; 0x32
 8003736:	4a08      	ldr	r2, [pc, #32]	; (8003758 <UART_SetConfig+0x1b0>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	f003 020f 	and.w	r2, r3, #15
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	440a      	add	r2, r1
 8003748:	609a      	str	r2, [r3, #8]
}
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40013800 	.word	0x40013800
 8003758:	51eb851f 	.word	0x51eb851f

0800375c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800376a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800376e:	2b84      	cmp	r3, #132	; 0x84
 8003770:	d005      	beq.n	800377e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003772:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4413      	add	r3, r2
 800377a:	3303      	adds	r3, #3
 800377c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800377e:	68fb      	ldr	r3, [r7, #12]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr

0800378a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800378e:	f000 ff6d 	bl	800466c <vTaskStartScheduler>
  
  return osOK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}

08003798 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800379a:	b089      	sub	sp, #36	; 0x24
 800379c:	af04      	add	r7, sp, #16
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d020      	beq.n	80037ec <osThreadCreate+0x54>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d01c      	beq.n	80037ec <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685c      	ldr	r4, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681d      	ldr	r5, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691e      	ldr	r6, [r3, #16]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ffc9 	bl	800375c <makeFreeRtosPriority>
 80037ca:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037d4:	9202      	str	r2, [sp, #8]
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	9100      	str	r1, [sp, #0]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	4632      	mov	r2, r6
 80037de:	4629      	mov	r1, r5
 80037e0:	4620      	mov	r0, r4
 80037e2:	f000 fd88 	bl	80042f6 <xTaskCreateStatic>
 80037e6:	4603      	mov	r3, r0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e01c      	b.n	8003826 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685c      	ldr	r4, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037f8:	b29e      	uxth	r6, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ffab 	bl	800375c <makeFreeRtosPriority>
 8003806:	4602      	mov	r2, r0
 8003808:	f107 030c 	add.w	r3, r7, #12
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	9200      	str	r2, [sp, #0]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	4632      	mov	r2, r6
 8003814:	4629      	mov	r1, r5
 8003816:	4620      	mov	r0, r4
 8003818:	f000 fdc6 	bl	80043a8 <xTaskCreate>
 800381c:	4603      	mov	r3, r0
 800381e:	2b01      	cmp	r3, #1
 8003820:	d001      	beq.n	8003826 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003822:	2300      	movs	r3, #0
 8003824:	e000      	b.n	8003828 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003826:	68fb      	ldr	r3, [r7, #12]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003830 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <osDelay+0x16>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	e000      	b.n	8003848 <osDelay+0x18>
 8003846:	2301      	movs	r3, #1
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fedb 	bl	8004604 <vTaskDelay>
  
  return osOK;
 800384e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d007      	beq.n	8003878 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4619      	mov	r1, r3
 800386e:	2001      	movs	r0, #1
 8003870:	f000 fa22 	bl	8003cb8 <xQueueCreateMutexStatic>
 8003874:	4603      	mov	r3, r0
 8003876:	e003      	b.n	8003880 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003878:	2001      	movs	r0, #1
 800387a:	f000 fa05 	bl	8003c88 <xQueueCreateMutex>
 800387e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f103 0208 	add.w	r2, r3, #8
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f04f 32ff 	mov.w	r2, #4294967295
 80038a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f103 0208 	add.w	r2, r3, #8
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f103 0208 	add.w	r2, r3, #8
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr

080038de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	601a      	str	r2, [r3, #0]
}
 800391a:	bf00      	nop
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr

08003924 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393a:	d103      	bne.n	8003944 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	e00c      	b.n	800395e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3308      	adds	r3, #8
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	e002      	b.n	8003952 <vListInsert+0x2e>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	429a      	cmp	r2, r3
 800395c:	d2f6      	bcs.n	800394c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	601a      	str	r2, [r3, #0]
}
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6892      	ldr	r2, [r2, #8]
 80039aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6852      	ldr	r2, [r2, #4]
 80039b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d103      	bne.n	80039c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	1e5a      	subs	r2, r3, #1
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr
	...

080039e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	e7fe      	b.n	8003a0e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003a10:	f001 fd52 	bl	80054b8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1c:	68f9      	ldr	r1, [r7, #12]
 8003a1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	441a      	add	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a40:	3b01      	subs	r3, #1
 8003a42:	68f9      	ldr	r1, [r7, #12]
 8003a44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a46:	fb01 f303 	mul.w	r3, r1, r3
 8003a4a:	441a      	add	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	22ff      	movs	r2, #255	; 0xff
 8003a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	22ff      	movs	r2, #255	; 0xff
 8003a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d114      	bne.n	8003a90 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01a      	beq.n	8003aa4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3310      	adds	r3, #16
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 f83c 	bl	8004af0 <xTaskRemoveFromEventList>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d012      	beq.n	8003aa4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	; (8003ab4 <xQueueGenericReset+0xcc>)
 8003a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	e009      	b.n	8003aa4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	3310      	adds	r3, #16
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff fef7 	bl	8003888 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3324      	adds	r3, #36	; 0x24
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fef2 	bl	8003888 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003aa4:	f001 fd36 	bl	8005514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003aa8:	2301      	movs	r3, #1
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	e000ed04 	.word	0xe000ed04

08003ab8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08e      	sub	sp, #56	; 0x38
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d109      	bne.n	8003ae0 <xQueueGenericCreateStatic+0x28>
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ade:	e7fe      	b.n	8003ade <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <xQueueGenericCreateStatic+0x42>
 8003ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
 8003af8:	e7fe      	b.n	8003af8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <xQueueGenericCreateStatic+0x4e>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <xQueueGenericCreateStatic+0x52>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <xQueueGenericCreateStatic+0x54>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <xQueueGenericCreateStatic+0x6c>
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	623b      	str	r3, [r7, #32]
 8003b22:	e7fe      	b.n	8003b22 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <xQueueGenericCreateStatic+0x78>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <xQueueGenericCreateStatic+0x7c>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <xQueueGenericCreateStatic+0x7e>
 8003b34:	2300      	movs	r3, #0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <xQueueGenericCreateStatic+0x96>
 8003b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3e:	f383 8811 	msr	BASEPRI, r3
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	e7fe      	b.n	8003b4c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b4e:	2348      	movs	r3, #72	; 0x48
 8003b50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2b48      	cmp	r3, #72	; 0x48
 8003b56:	d009      	beq.n	8003b6c <xQueueGenericCreateStatic+0xb4>
 8003b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	e7fe      	b.n	8003b6a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b7e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	4613      	mov	r3, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f842 	bl	8003c16 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3730      	adds	r7, #48	; 0x30
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08a      	sub	sp, #40	; 0x28
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <xQueueGenericCreate+0x28>
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	e7fe      	b.n	8003bc2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	e004      	b.n	8003bda <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	fb02 f303 	mul.w	r3, r2, r3
 8003bd8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	3348      	adds	r3, #72	; 0x48
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 fd24 	bl	800562c <pvPortMalloc>
 8003be4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00f      	beq.n	8003c0c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	3348      	adds	r3, #72	; 0x48
 8003bf0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003bfa:	79fa      	ldrb	r2, [r7, #7]
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	4613      	mov	r3, r2
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f805 	bl	8003c16 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003c0c:	69bb      	ldr	r3, [r7, #24]
	}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3720      	adds	r7, #32
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	607a      	str	r2, [r7, #4]
 8003c22:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d103      	bne.n	8003c32 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e002      	b.n	8003c38 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c44:	2101      	movs	r1, #1
 8003c46:	69b8      	ldr	r0, [r7, #24]
 8003c48:	f7ff fece 	bl	80039e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00e      	beq.n	8003c80 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003c74:	2300      	movs	r3, #0
 8003c76:	2200      	movs	r2, #0
 8003c78:	2100      	movs	r1, #0
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f838 	bl	8003cf0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003c80:	bf00      	nop
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003c92:	2301      	movs	r3, #1
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	6939      	ldr	r1, [r7, #16]
 8003ca0:	6978      	ldr	r0, [r7, #20]
 8003ca2:	f7ff ff7b 	bl	8003b9c <xQueueGenericCreate>
 8003ca6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f7ff ffd3 	bl	8003c54 <prvInitialiseMutex>

		return pxNewQueue;
 8003cae:	68fb      	ldr	r3, [r7, #12]
	}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	6039      	str	r1, [r7, #0]
 8003cc2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	6939      	ldr	r1, [r7, #16]
 8003cd6:	6978      	ldr	r0, [r7, #20]
 8003cd8:	f7ff feee 	bl	8003ab8 <xQueueGenericCreateStatic>
 8003cdc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f7ff ffb8 	bl	8003c54 <prvInitialiseMutex>

		return pxNewQueue;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
	}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08e      	sub	sp, #56	; 0x38
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d109      	bne.n	8003d20 <xQueueGenericSend+0x30>
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d1e:	e7fe      	b.n	8003d1e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d103      	bne.n	8003d2e <xQueueGenericSend+0x3e>
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <xQueueGenericSend+0x42>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <xQueueGenericSend+0x44>
 8003d32:	2300      	movs	r3, #0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d109      	bne.n	8003d4c <xQueueGenericSend+0x5c>
 8003d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4a:	e7fe      	b.n	8003d4a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d103      	bne.n	8003d5a <xQueueGenericSend+0x6a>
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <xQueueGenericSend+0x6e>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <xQueueGenericSend+0x70>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d109      	bne.n	8003d78 <xQueueGenericSend+0x88>
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	623b      	str	r3, [r7, #32]
 8003d76:	e7fe      	b.n	8003d76 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d78:	f001 f874 	bl	8004e64 <xTaskGetSchedulerState>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d102      	bne.n	8003d88 <xQueueGenericSend+0x98>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <xQueueGenericSend+0x9c>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <xQueueGenericSend+0x9e>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <xQueueGenericSend+0xb6>
 8003d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	61fb      	str	r3, [r7, #28]
 8003da4:	e7fe      	b.n	8003da4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003da6:	f001 fb87 	bl	80054b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d302      	bcc.n	8003dbc <xQueueGenericSend+0xcc>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d129      	bne.n	8003e10 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dc2:	f000 f9ae 	bl	8004122 <prvCopyDataToQueue>
 8003dc6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d010      	beq.n	8003df2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	3324      	adds	r3, #36	; 0x24
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fe8b 	bl	8004af0 <xTaskRemoveFromEventList>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d013      	beq.n	8003e08 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003de0:	4b3f      	ldr	r3, [pc, #252]	; (8003ee0 <xQueueGenericSend+0x1f0>)
 8003de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	e00a      	b.n	8003e08 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d007      	beq.n	8003e08 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003df8:	4b39      	ldr	r3, [pc, #228]	; (8003ee0 <xQueueGenericSend+0x1f0>)
 8003dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e08:	f001 fb84 	bl	8005514 <vPortExitCritical>
				return pdPASS;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e063      	b.n	8003ed8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d103      	bne.n	8003e1e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e16:	f001 fb7d 	bl	8005514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e05c      	b.n	8003ed8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d106      	bne.n	8003e32 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e24:	f107 0314 	add.w	r3, r7, #20
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fec3 	bl	8004bb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e32:	f001 fb6f 	bl	8005514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e36:	f000 fc77 	bl	8004728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e3a:	f001 fb3d 	bl	80054b8 <vPortEnterCritical>
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e44:	b25b      	sxtb	r3, r3
 8003e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4a:	d103      	bne.n	8003e54 <xQueueGenericSend+0x164>
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e5a:	b25b      	sxtb	r3, r3
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e60:	d103      	bne.n	8003e6a <xQueueGenericSend+0x17a>
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e6a:	f001 fb53 	bl	8005514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e6e:	1d3a      	adds	r2, r7, #4
 8003e70:	f107 0314 	add.w	r3, r7, #20
 8003e74:	4611      	mov	r1, r2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 feb2 	bl	8004be0 <xTaskCheckForTimeOut>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d124      	bne.n	8003ecc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e84:	f000 fa1f 	bl	80042c6 <prvIsQueueFull>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d018      	beq.n	8003ec0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	3310      	adds	r3, #16
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	4611      	mov	r1, r2
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fe06 	bl	8004aa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e9e:	f000 f9aa 	bl	80041f6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ea2:	f000 fc4f 	bl	8004744 <xTaskResumeAll>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f47f af7c 	bne.w	8003da6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003eae:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <xQueueGenericSend+0x1f0>)
 8003eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	e772      	b.n	8003da6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ec2:	f000 f998 	bl	80041f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ec6:	f000 fc3d 	bl	8004744 <xTaskResumeAll>
 8003eca:	e76c      	b.n	8003da6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ece:	f000 f992 	bl	80041f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ed2:	f000 fc37 	bl	8004744 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ed6:	2300      	movs	r3, #0
		}
	}
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3738      	adds	r7, #56	; 0x38
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	e000ed04 	.word	0xe000ed04

08003ee4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08e      	sub	sp, #56	; 0x38
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <xQueueSemaphoreTake+0x30>
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	623b      	str	r3, [r7, #32]
 8003f12:	e7fe      	b.n	8003f12 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d009      	beq.n	8003f30 <xQueueSemaphoreTake+0x4c>
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	61fb      	str	r3, [r7, #28]
 8003f2e:	e7fe      	b.n	8003f2e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f30:	f000 ff98 	bl	8004e64 <xTaskGetSchedulerState>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d102      	bne.n	8003f40 <xQueueSemaphoreTake+0x5c>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <xQueueSemaphoreTake+0x60>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <xQueueSemaphoreTake+0x62>
 8003f44:	2300      	movs	r3, #0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d109      	bne.n	8003f5e <xQueueSemaphoreTake+0x7a>
 8003f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	61bb      	str	r3, [r7, #24]
 8003f5c:	e7fe      	b.n	8003f5c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f5e:	f001 faab 	bl	80054b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d024      	beq.n	8003fb8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	1e5a      	subs	r2, r3, #1
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d104      	bne.n	8003f88 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003f7e:	f001 f937 	bl	80051f0 <pvTaskIncrementMutexHeldCount>
 8003f82:	4602      	mov	r2, r0
 8003f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f86:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00f      	beq.n	8003fb0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f92:	3310      	adds	r3, #16
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fdab 	bl	8004af0 <xTaskRemoveFromEventList>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003fa0:	4b53      	ldr	r3, [pc, #332]	; (80040f0 <xQueueSemaphoreTake+0x20c>)
 8003fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003fb0:	f001 fab0 	bl	8005514 <vPortExitCritical>
				return pdPASS;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e096      	b.n	80040e6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d110      	bne.n	8003fe0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d009      	beq.n	8003fd8 <xQueueSemaphoreTake+0xf4>
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	e7fe      	b.n	8003fd6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003fd8:	f001 fa9c 	bl	8005514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e082      	b.n	80040e6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fe6:	f107 030c 	add.w	r3, r7, #12
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fde2 	bl	8004bb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ff4:	f001 fa8e 	bl	8005514 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ff8:	f000 fb96 	bl	8004728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ffc:	f001 fa5c 	bl	80054b8 <vPortEnterCritical>
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004006:	b25b      	sxtb	r3, r3
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d103      	bne.n	8004016 <xQueueSemaphoreTake+0x132>
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800401c:	b25b      	sxtb	r3, r3
 800401e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004022:	d103      	bne.n	800402c <xQueueSemaphoreTake+0x148>
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800402c:	f001 fa72 	bl	8005514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004030:	463a      	mov	r2, r7
 8004032:	f107 030c 	add.w	r3, r7, #12
 8004036:	4611      	mov	r1, r2
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fdd1 	bl	8004be0 <xTaskCheckForTimeOut>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d132      	bne.n	80040aa <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004044:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004046:	f000 f928 	bl	800429a <prvIsQueueEmpty>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d026      	beq.n	800409e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d109      	bne.n	800406c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004058:	f001 fa2e 	bl	80054b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	4618      	mov	r0, r3
 8004062:	f000 ff1d 	bl	8004ea0 <xTaskPriorityInherit>
 8004066:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004068:	f001 fa54 	bl	8005514 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800406c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406e:	3324      	adds	r3, #36	; 0x24
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	4611      	mov	r1, r2
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fd17 	bl	8004aa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800407a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800407c:	f000 f8bb 	bl	80041f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004080:	f000 fb60 	bl	8004744 <xTaskResumeAll>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	f47f af69 	bne.w	8003f5e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800408c:	4b18      	ldr	r3, [pc, #96]	; (80040f0 <xQueueSemaphoreTake+0x20c>)
 800408e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	e75f      	b.n	8003f5e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800409e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040a0:	f000 f8a9 	bl	80041f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040a4:	f000 fb4e 	bl	8004744 <xTaskResumeAll>
 80040a8:	e759      	b.n	8003f5e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80040aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040ac:	f000 f8a3 	bl	80041f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040b0:	f000 fb48 	bl	8004744 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040b6:	f000 f8f0 	bl	800429a <prvIsQueueEmpty>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f43f af4e 	beq.w	8003f5e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00d      	beq.n	80040e4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80040c8:	f001 f9f6 	bl	80054b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80040cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040ce:	f000 f811 	bl	80040f4 <prvGetDisinheritPriorityAfterTimeout>
 80040d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80040d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 ffea 	bl	80050b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80040e0:	f001 fa18 	bl	8005514 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3738      	adds	r7, #56	; 0x38
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	e000ed04 	.word	0xe000ed04

080040f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	2b00      	cmp	r3, #0
 8004102:	d006      	beq.n	8004112 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f1c3 0307 	rsb	r3, r3, #7
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	e001      	b.n	8004116 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004116:	68fb      	ldr	r3, [r7, #12]
	}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr

08004122 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b086      	sub	sp, #24
 8004126:	af00      	add	r7, sp, #0
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10d      	bne.n	800415c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d14d      	bne.n	80041e4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	4618      	mov	r0, r3
 800414e:	f000 ff2d 	bl	8004fac <xTaskPriorityDisinherit>
 8004152:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	e043      	b.n	80041e4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d119      	bne.n	8004196 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6898      	ldr	r0, [r3, #8]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	461a      	mov	r2, r3
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	f001 fc55 	bl	8005a1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	441a      	add	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	429a      	cmp	r2, r3
 800418a:	d32b      	bcc.n	80041e4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	609a      	str	r2, [r3, #8]
 8004194:	e026      	b.n	80041e4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	68d8      	ldr	r0, [r3, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	461a      	mov	r2, r3
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	f001 fc3b 	bl	8005a1c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	425b      	negs	r3, r3
 80041b0:	441a      	add	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d207      	bcs.n	80041d2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	425b      	negs	r3, r3
 80041cc:	441a      	add	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d105      	bne.n	80041e4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80041ec:	697b      	ldr	r3, [r7, #20]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041fe:	f001 f95b 	bl	80054b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004208:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800420a:	e011      	b.n	8004230 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	2b00      	cmp	r3, #0
 8004212:	d012      	beq.n	800423a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3324      	adds	r3, #36	; 0x24
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fc69 	bl	8004af0 <xTaskRemoveFromEventList>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004224:	f000 fd3c 	bl	8004ca0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	3b01      	subs	r3, #1
 800422c:	b2db      	uxtb	r3, r3
 800422e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004234:	2b00      	cmp	r3, #0
 8004236:	dce9      	bgt.n	800420c <prvUnlockQueue+0x16>
 8004238:	e000      	b.n	800423c <prvUnlockQueue+0x46>
					break;
 800423a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	22ff      	movs	r2, #255	; 0xff
 8004240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004244:	f001 f966 	bl	8005514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004248:	f001 f936 	bl	80054b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004252:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004254:	e011      	b.n	800427a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d012      	beq.n	8004284 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3310      	adds	r3, #16
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fc44 	bl	8004af0 <xTaskRemoveFromEventList>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800426e:	f000 fd17 	bl	8004ca0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004272:	7bbb      	ldrb	r3, [r7, #14]
 8004274:	3b01      	subs	r3, #1
 8004276:	b2db      	uxtb	r3, r3
 8004278:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800427a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800427e:	2b00      	cmp	r3, #0
 8004280:	dce9      	bgt.n	8004256 <prvUnlockQueue+0x60>
 8004282:	e000      	b.n	8004286 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004284:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	22ff      	movs	r2, #255	; 0xff
 800428a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800428e:	f001 f941 	bl	8005514 <vPortExitCritical>
}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042a2:	f001 f909 	bl	80054b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80042ae:	2301      	movs	r3, #1
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e001      	b.n	80042b8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042b8:	f001 f92c 	bl	8005514 <vPortExitCritical>

	return xReturn;
 80042bc:	68fb      	ldr	r3, [r7, #12]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042ce:	f001 f8f3 	bl	80054b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	429a      	cmp	r2, r3
 80042dc:	d102      	bne.n	80042e4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80042de:	2301      	movs	r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	e001      	b.n	80042e8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042e8:	f001 f914 	bl	8005514 <vPortExitCritical>

	return xReturn;
 80042ec:	68fb      	ldr	r3, [r7, #12]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b08e      	sub	sp, #56	; 0x38
 80042fa:	af04      	add	r7, sp, #16
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	607a      	str	r2, [r7, #4]
 8004302:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <xTaskCreateStatic+0x28>
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	623b      	str	r3, [r7, #32]
 800431c:	e7fe      	b.n	800431c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	2b00      	cmp	r3, #0
 8004322:	d109      	bne.n	8004338 <xTaskCreateStatic+0x42>
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	e7fe      	b.n	8004336 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004338:	2354      	movs	r3, #84	; 0x54
 800433a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b54      	cmp	r3, #84	; 0x54
 8004340:	d009      	beq.n	8004356 <xTaskCreateStatic+0x60>
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	e7fe      	b.n	8004354 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	2b00      	cmp	r3, #0
 800435a:	d01e      	beq.n	800439a <xTaskCreateStatic+0xa4>
 800435c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435e:	2b00      	cmp	r3, #0
 8004360:	d01b      	beq.n	800439a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800436a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	2202      	movs	r2, #2
 8004370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004374:	2300      	movs	r3, #0
 8004376:	9303      	str	r3, [sp, #12]
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	9302      	str	r3, [sp, #8]
 800437c:	f107 0314 	add.w	r3, r7, #20
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	68b9      	ldr	r1, [r7, #8]
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f850 	bl	8004432 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004392:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004394:	f000 f8cc 	bl	8004530 <prvAddNewTaskToReadyList>
 8004398:	e001      	b.n	800439e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800439e:	697b      	ldr	r3, [r7, #20]
	}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3728      	adds	r7, #40	; 0x28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08c      	sub	sp, #48	; 0x30
 80043ac:	af04      	add	r7, sp, #16
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4618      	mov	r0, r3
 80043be:	f001 f935 	bl	800562c <pvPortMalloc>
 80043c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00e      	beq.n	80043e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80043ca:	2054      	movs	r0, #84	; 0x54
 80043cc:	f001 f92e 	bl	800562c <pvPortMalloc>
 80043d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	631a      	str	r2, [r3, #48]	; 0x30
 80043de:	e005      	b.n	80043ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043e0:	6978      	ldr	r0, [r7, #20]
 80043e2:	f001 f9e5 	bl	80057b0 <vPortFree>
 80043e6:	e001      	b.n	80043ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d017      	beq.n	8004422 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043fa:	88fa      	ldrh	r2, [r7, #6]
 80043fc:	2300      	movs	r3, #0
 80043fe:	9303      	str	r3, [sp, #12]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	9302      	str	r3, [sp, #8]
 8004404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004406:	9301      	str	r3, [sp, #4]
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f80e 	bl	8004432 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004416:	69f8      	ldr	r0, [r7, #28]
 8004418:	f000 f88a 	bl	8004530 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800441c:	2301      	movs	r3, #1
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	e002      	b.n	8004428 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004422:	f04f 33ff 	mov.w	r3, #4294967295
 8004426:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004428:	69bb      	ldr	r3, [r7, #24]
	}
 800442a:	4618      	mov	r0, r3
 800442c:	3720      	adds	r7, #32
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b088      	sub	sp, #32
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	607a      	str	r2, [r7, #4]
 800443e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800444a:	3b01      	subs	r3, #1
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	f023 0307 	bic.w	r3, r3, #7
 8004458:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	2b00      	cmp	r3, #0
 8004462:	d009      	beq.n	8004478 <prvInitialiseNewTask+0x46>
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	e7fe      	b.n	8004476 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004478:	2300      	movs	r3, #0
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	e012      	b.n	80044a4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	4413      	add	r3, r2
 8004484:	7819      	ldrb	r1, [r3, #0]
 8004486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	4413      	add	r3, r2
 800448c:	3334      	adds	r3, #52	; 0x34
 800448e:	460a      	mov	r2, r1
 8004490:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	4413      	add	r3, r2
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d006      	beq.n	80044ac <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	3301      	adds	r3, #1
 80044a2:	61fb      	str	r3, [r7, #28]
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	2b0f      	cmp	r3, #15
 80044a8:	d9e9      	bls.n	800447e <prvInitialiseNewTask+0x4c>
 80044aa:	e000      	b.n	80044ae <prvInitialiseNewTask+0x7c>
		{
			break;
 80044ac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	2b06      	cmp	r3, #6
 80044ba:	d901      	bls.n	80044c0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044bc:	2306      	movs	r3, #6
 80044be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	2200      	movs	r2, #0
 80044d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	3304      	adds	r3, #4
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff f9f5 	bl	80038c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044de:	3318      	adds	r3, #24
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff f9f0 	bl	80038c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	f1c3 0207 	rsb	r2, r3, #7
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	2200      	movs	r2, #0
 8004500:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	68f9      	ldr	r1, [r7, #12]
 800450e:	69b8      	ldr	r0, [r7, #24]
 8004510:	f000 fee8 	bl	80052e4 <pxPortInitialiseStack>
 8004514:	4602      	mov	r2, r0
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004526:	bf00      	nop
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004538:	f000 ffbe 	bl	80054b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800453c:	4b2a      	ldr	r3, [pc, #168]	; (80045e8 <prvAddNewTaskToReadyList+0xb8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3301      	adds	r3, #1
 8004542:	4a29      	ldr	r2, [pc, #164]	; (80045e8 <prvAddNewTaskToReadyList+0xb8>)
 8004544:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004546:	4b29      	ldr	r3, [pc, #164]	; (80045ec <prvAddNewTaskToReadyList+0xbc>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800454e:	4a27      	ldr	r2, [pc, #156]	; (80045ec <prvAddNewTaskToReadyList+0xbc>)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004554:	4b24      	ldr	r3, [pc, #144]	; (80045e8 <prvAddNewTaskToReadyList+0xb8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d110      	bne.n	800457e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800455c:	f000 fbc4 	bl	8004ce8 <prvInitialiseTaskLists>
 8004560:	e00d      	b.n	800457e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004562:	4b23      	ldr	r3, [pc, #140]	; (80045f0 <prvAddNewTaskToReadyList+0xc0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <prvAddNewTaskToReadyList+0xbc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	429a      	cmp	r2, r3
 8004576:	d802      	bhi.n	800457e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004578:	4a1c      	ldr	r2, [pc, #112]	; (80045ec <prvAddNewTaskToReadyList+0xbc>)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800457e:	4b1d      	ldr	r3, [pc, #116]	; (80045f4 <prvAddNewTaskToReadyList+0xc4>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3301      	adds	r3, #1
 8004584:	4a1b      	ldr	r2, [pc, #108]	; (80045f4 <prvAddNewTaskToReadyList+0xc4>)
 8004586:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	2201      	movs	r2, #1
 800458e:	409a      	lsls	r2, r3
 8004590:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <prvAddNewTaskToReadyList+0xc8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4313      	orrs	r3, r2
 8004596:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <prvAddNewTaskToReadyList+0xc8>)
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4a15      	ldr	r2, [pc, #84]	; (80045fc <prvAddNewTaskToReadyList+0xcc>)
 80045a8:	441a      	add	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3304      	adds	r3, #4
 80045ae:	4619      	mov	r1, r3
 80045b0:	4610      	mov	r0, r2
 80045b2:	f7ff f994 	bl	80038de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045b6:	f000 ffad 	bl	8005514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045ba:	4b0d      	ldr	r3, [pc, #52]	; (80045f0 <prvAddNewTaskToReadyList+0xc0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00e      	beq.n	80045e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045c2:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <prvAddNewTaskToReadyList+0xbc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d207      	bcs.n	80045e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <prvAddNewTaskToReadyList+0xd0>)
 80045d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	200003a4 	.word	0x200003a4
 80045ec:	200002a4 	.word	0x200002a4
 80045f0:	200003b0 	.word	0x200003b0
 80045f4:	200003c0 	.word	0x200003c0
 80045f8:	200003ac 	.word	0x200003ac
 80045fc:	200002a8 	.word	0x200002a8
 8004600:	e000ed04 	.word	0xe000ed04

08004604 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d016      	beq.n	8004644 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004616:	4b13      	ldr	r3, [pc, #76]	; (8004664 <vTaskDelay+0x60>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <vTaskDelay+0x2e>
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	60bb      	str	r3, [r7, #8]
 8004630:	e7fe      	b.n	8004630 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004632:	f000 f879 	bl	8004728 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004636:	2100      	movs	r1, #0
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fded 	bl	8005218 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800463e:	f000 f881 	bl	8004744 <xTaskResumeAll>
 8004642:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d107      	bne.n	800465a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800464a:	4b07      	ldr	r3, [pc, #28]	; (8004668 <vTaskDelay+0x64>)
 800464c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800465a:	bf00      	nop
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	200003cc 	.word	0x200003cc
 8004668:	e000ed04 	.word	0xe000ed04

0800466c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004672:	2300      	movs	r3, #0
 8004674:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800467a:	463a      	mov	r2, r7
 800467c:	1d39      	adds	r1, r7, #4
 800467e:	f107 0308 	add.w	r3, r7, #8
 8004682:	4618      	mov	r0, r3
 8004684:	f7fb fd64 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004688:	6839      	ldr	r1, [r7, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	9202      	str	r2, [sp, #8]
 8004690:	9301      	str	r3, [sp, #4]
 8004692:	2300      	movs	r3, #0
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	2300      	movs	r3, #0
 8004698:	460a      	mov	r2, r1
 800469a:	491d      	ldr	r1, [pc, #116]	; (8004710 <vTaskStartScheduler+0xa4>)
 800469c:	481d      	ldr	r0, [pc, #116]	; (8004714 <vTaskStartScheduler+0xa8>)
 800469e:	f7ff fe2a 	bl	80042f6 <xTaskCreateStatic>
 80046a2:	4602      	mov	r2, r0
 80046a4:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <vTaskStartScheduler+0xac>)
 80046a6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046a8:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <vTaskStartScheduler+0xac>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046b0:	2301      	movs	r3, #1
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	e001      	b.n	80046ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d115      	bne.n	80046ec <vTaskStartScheduler+0x80>
 80046c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <vTaskStartScheduler+0xb0>)
 80046d4:	f04f 32ff 	mov.w	r2, #4294967295
 80046d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046da:	4b11      	ldr	r3, [pc, #68]	; (8004720 <vTaskStartScheduler+0xb4>)
 80046dc:	2201      	movs	r2, #1
 80046de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80046e0:	4b10      	ldr	r3, [pc, #64]	; (8004724 <vTaskStartScheduler+0xb8>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046e6:	f000 fe77 	bl	80053d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046ea:	e00d      	b.n	8004708 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d109      	bne.n	8004708 <vTaskStartScheduler+0x9c>
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	e7fe      	b.n	8004706 <vTaskStartScheduler+0x9a>
}
 8004708:	bf00      	nop
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	08005b10 	.word	0x08005b10
 8004714:	08004cb9 	.word	0x08004cb9
 8004718:	200003c8 	.word	0x200003c8
 800471c:	200003c4 	.word	0x200003c4
 8004720:	200003b0 	.word	0x200003b0
 8004724:	200003a8 	.word	0x200003a8

08004728 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800472c:	4b04      	ldr	r3, [pc, #16]	; (8004740 <vTaskSuspendAll+0x18>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3301      	adds	r3, #1
 8004732:	4a03      	ldr	r2, [pc, #12]	; (8004740 <vTaskSuspendAll+0x18>)
 8004734:	6013      	str	r3, [r2, #0]
}
 8004736:	bf00      	nop
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	200003cc 	.word	0x200003cc

08004744 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800474e:	2300      	movs	r3, #0
 8004750:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004752:	4b41      	ldr	r3, [pc, #260]	; (8004858 <xTaskResumeAll+0x114>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d109      	bne.n	800476e <xTaskResumeAll+0x2a>
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	e7fe      	b.n	800476c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800476e:	f000 fea3 	bl	80054b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004772:	4b39      	ldr	r3, [pc, #228]	; (8004858 <xTaskResumeAll+0x114>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3b01      	subs	r3, #1
 8004778:	4a37      	ldr	r2, [pc, #220]	; (8004858 <xTaskResumeAll+0x114>)
 800477a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800477c:	4b36      	ldr	r3, [pc, #216]	; (8004858 <xTaskResumeAll+0x114>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d161      	bne.n	8004848 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004784:	4b35      	ldr	r3, [pc, #212]	; (800485c <xTaskResumeAll+0x118>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d05d      	beq.n	8004848 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800478c:	e02e      	b.n	80047ec <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800478e:	4b34      	ldr	r3, [pc, #208]	; (8004860 <xTaskResumeAll+0x11c>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3318      	adds	r3, #24
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff f8fa 	bl	8003994 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff f8f5 	bl	8003994 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	2201      	movs	r2, #1
 80047b0:	409a      	lsls	r2, r3
 80047b2:	4b2c      	ldr	r3, [pc, #176]	; (8004864 <xTaskResumeAll+0x120>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	4a2a      	ldr	r2, [pc, #168]	; (8004864 <xTaskResumeAll+0x120>)
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4a27      	ldr	r2, [pc, #156]	; (8004868 <xTaskResumeAll+0x124>)
 80047ca:	441a      	add	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f7ff f883 	bl	80038de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047dc:	4b23      	ldr	r3, [pc, #140]	; (800486c <xTaskResumeAll+0x128>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d302      	bcc.n	80047ec <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80047e6:	4b22      	ldr	r3, [pc, #136]	; (8004870 <xTaskResumeAll+0x12c>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047ec:	4b1c      	ldr	r3, [pc, #112]	; (8004860 <xTaskResumeAll+0x11c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1cc      	bne.n	800478e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047fa:	f000 fb0f 	bl	8004e1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80047fe:	4b1d      	ldr	r3, [pc, #116]	; (8004874 <xTaskResumeAll+0x130>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d010      	beq.n	800482c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800480a:	f000 f837 	bl	800487c <xTaskIncrementTick>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004814:	4b16      	ldr	r3, [pc, #88]	; (8004870 <xTaskResumeAll+0x12c>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3b01      	subs	r3, #1
 800481e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f1      	bne.n	800480a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004826:	4b13      	ldr	r3, [pc, #76]	; (8004874 <xTaskResumeAll+0x130>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800482c:	4b10      	ldr	r3, [pc, #64]	; (8004870 <xTaskResumeAll+0x12c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d009      	beq.n	8004848 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004834:	2301      	movs	r3, #1
 8004836:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004838:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <xTaskResumeAll+0x134>)
 800483a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004848:	f000 fe64 	bl	8005514 <vPortExitCritical>

	return xAlreadyYielded;
 800484c:	68bb      	ldr	r3, [r7, #8]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	200003cc 	.word	0x200003cc
 800485c:	200003a4 	.word	0x200003a4
 8004860:	20000364 	.word	0x20000364
 8004864:	200003ac 	.word	0x200003ac
 8004868:	200002a8 	.word	0x200002a8
 800486c:	200002a4 	.word	0x200002a4
 8004870:	200003b8 	.word	0x200003b8
 8004874:	200003b4 	.word	0x200003b4
 8004878:	e000ed04 	.word	0xe000ed04

0800487c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004886:	4b50      	ldr	r3, [pc, #320]	; (80049c8 <xTaskIncrementTick+0x14c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f040 808c 	bne.w	80049a8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004890:	4b4e      	ldr	r3, [pc, #312]	; (80049cc <xTaskIncrementTick+0x150>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3301      	adds	r3, #1
 8004896:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004898:	4a4c      	ldr	r2, [pc, #304]	; (80049cc <xTaskIncrementTick+0x150>)
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d11f      	bne.n	80048e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80048a4:	4b4a      	ldr	r3, [pc, #296]	; (80049d0 <xTaskIncrementTick+0x154>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <xTaskIncrementTick+0x46>
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	e7fe      	b.n	80048c0 <xTaskIncrementTick+0x44>
 80048c2:	4b43      	ldr	r3, [pc, #268]	; (80049d0 <xTaskIncrementTick+0x154>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	4b42      	ldr	r3, [pc, #264]	; (80049d4 <xTaskIncrementTick+0x158>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a40      	ldr	r2, [pc, #256]	; (80049d0 <xTaskIncrementTick+0x154>)
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	4a40      	ldr	r2, [pc, #256]	; (80049d4 <xTaskIncrementTick+0x158>)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	4b40      	ldr	r3, [pc, #256]	; (80049d8 <xTaskIncrementTick+0x15c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3301      	adds	r3, #1
 80048dc:	4a3e      	ldr	r2, [pc, #248]	; (80049d8 <xTaskIncrementTick+0x15c>)
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	f000 fa9c 	bl	8004e1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048e4:	4b3d      	ldr	r3, [pc, #244]	; (80049dc <xTaskIncrementTick+0x160>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d34d      	bcc.n	800498a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ee:	4b38      	ldr	r3, [pc, #224]	; (80049d0 <xTaskIncrementTick+0x154>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <xTaskIncrementTick+0x80>
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <xTaskIncrementTick+0x82>
 80048fc:	2300      	movs	r3, #0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d004      	beq.n	800490c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004902:	4b36      	ldr	r3, [pc, #216]	; (80049dc <xTaskIncrementTick+0x160>)
 8004904:	f04f 32ff 	mov.w	r2, #4294967295
 8004908:	601a      	str	r2, [r3, #0]
					break;
 800490a:	e03e      	b.n	800498a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800490c:	4b30      	ldr	r3, [pc, #192]	; (80049d0 <xTaskIncrementTick+0x154>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	d203      	bcs.n	800492c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004924:	4a2d      	ldr	r2, [pc, #180]	; (80049dc <xTaskIncrementTick+0x160>)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6013      	str	r3, [r2, #0]
						break;
 800492a:	e02e      	b.n	800498a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	3304      	adds	r3, #4
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff f82f 	bl	8003994 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	2b00      	cmp	r3, #0
 800493c:	d004      	beq.n	8004948 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	3318      	adds	r3, #24
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff f826 	bl	8003994 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	2201      	movs	r2, #1
 800494e:	409a      	lsls	r2, r3
 8004950:	4b23      	ldr	r3, [pc, #140]	; (80049e0 <xTaskIncrementTick+0x164>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4313      	orrs	r3, r2
 8004956:	4a22      	ldr	r2, [pc, #136]	; (80049e0 <xTaskIncrementTick+0x164>)
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495e:	4613      	mov	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <xTaskIncrementTick+0x168>)
 8004968:	441a      	add	r2, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	3304      	adds	r3, #4
 800496e:	4619      	mov	r1, r3
 8004970:	4610      	mov	r0, r2
 8004972:	f7fe ffb4 	bl	80038de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497a:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <xTaskIncrementTick+0x16c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	429a      	cmp	r2, r3
 8004982:	d3b4      	bcc.n	80048ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004984:	2301      	movs	r3, #1
 8004986:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004988:	e7b1      	b.n	80048ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800498a:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <xTaskIncrementTick+0x16c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004990:	4914      	ldr	r1, [pc, #80]	; (80049e4 <xTaskIncrementTick+0x168>)
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d907      	bls.n	80049b2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80049a2:	2301      	movs	r3, #1
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	e004      	b.n	80049b2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80049a8:	4b10      	ldr	r3, [pc, #64]	; (80049ec <xTaskIncrementTick+0x170>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3301      	adds	r3, #1
 80049ae:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <xTaskIncrementTick+0x170>)
 80049b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80049b2:	4b0f      	ldr	r3, [pc, #60]	; (80049f0 <xTaskIncrementTick+0x174>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80049ba:	2301      	movs	r3, #1
 80049bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80049be:	697b      	ldr	r3, [r7, #20]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	200003cc 	.word	0x200003cc
 80049cc:	200003a8 	.word	0x200003a8
 80049d0:	2000035c 	.word	0x2000035c
 80049d4:	20000360 	.word	0x20000360
 80049d8:	200003bc 	.word	0x200003bc
 80049dc:	200003c4 	.word	0x200003c4
 80049e0:	200003ac 	.word	0x200003ac
 80049e4:	200002a8 	.word	0x200002a8
 80049e8:	200002a4 	.word	0x200002a4
 80049ec:	200003b4 	.word	0x200003b4
 80049f0:	200003b8 	.word	0x200003b8

080049f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049fa:	4b26      	ldr	r3, [pc, #152]	; (8004a94 <vTaskSwitchContext+0xa0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a02:	4b25      	ldr	r3, [pc, #148]	; (8004a98 <vTaskSwitchContext+0xa4>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a08:	e03e      	b.n	8004a88 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004a0a:	4b23      	ldr	r3, [pc, #140]	; (8004a98 <vTaskSwitchContext+0xa4>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004a10:	4b22      	ldr	r3, [pc, #136]	; (8004a9c <vTaskSwitchContext+0xa8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	fab3 f383 	clz	r3, r3
 8004a1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a1e:	7afb      	ldrb	r3, [r7, #11]
 8004a20:	f1c3 031f 	rsb	r3, r3, #31
 8004a24:	617b      	str	r3, [r7, #20]
 8004a26:	491e      	ldr	r1, [pc, #120]	; (8004aa0 <vTaskSwitchContext+0xac>)
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <vTaskSwitchContext+0x5a>
	__asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	607b      	str	r3, [r7, #4]
 8004a4c:	e7fe      	b.n	8004a4c <vTaskSwitchContext+0x58>
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4613      	mov	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4a11      	ldr	r2, [pc, #68]	; (8004aa0 <vTaskSwitchContext+0xac>)
 8004a5a:	4413      	add	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	605a      	str	r2, [r3, #4]
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	3308      	adds	r3, #8
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d104      	bne.n	8004a7e <vTaskSwitchContext+0x8a>
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a07      	ldr	r2, [pc, #28]	; (8004aa4 <vTaskSwitchContext+0xb0>)
 8004a86:	6013      	str	r3, [r2, #0]
}
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	200003cc 	.word	0x200003cc
 8004a98:	200003b8 	.word	0x200003b8
 8004a9c:	200003ac 	.word	0x200003ac
 8004aa0:	200002a8 	.word	0x200002a8
 8004aa4:	200002a4 	.word	0x200002a4

08004aa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d109      	bne.n	8004acc <vTaskPlaceOnEventList+0x24>
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	e7fe      	b.n	8004aca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004acc:	4b07      	ldr	r3, [pc, #28]	; (8004aec <vTaskPlaceOnEventList+0x44>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3318      	adds	r3, #24
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7fe ff25 	bl	8003924 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ada:	2101      	movs	r1, #1
 8004adc:	6838      	ldr	r0, [r7, #0]
 8004ade:	f000 fb9b 	bl	8005218 <prvAddCurrentTaskToDelayedList>
}
 8004ae2:	bf00      	nop
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	200002a4 	.word	0x200002a4

08004af0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d109      	bne.n	8004b1a <xTaskRemoveFromEventList+0x2a>
 8004b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	e7fe      	b.n	8004b18 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	3318      	adds	r3, #24
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe ff38 	bl	8003994 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b24:	4b1d      	ldr	r3, [pc, #116]	; (8004b9c <xTaskRemoveFromEventList+0xac>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d11c      	bne.n	8004b66 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fe ff2f 	bl	8003994 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	409a      	lsls	r2, r3
 8004b3e:	4b18      	ldr	r3, [pc, #96]	; (8004ba0 <xTaskRemoveFromEventList+0xb0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	4a16      	ldr	r2, [pc, #88]	; (8004ba0 <xTaskRemoveFromEventList+0xb0>)
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <xTaskRemoveFromEventList+0xb4>)
 8004b56:	441a      	add	r2, r3
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	f7fe febd 	bl	80038de <vListInsertEnd>
 8004b64:	e005      	b.n	8004b72 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	3318      	adds	r3, #24
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	480e      	ldr	r0, [pc, #56]	; (8004ba8 <xTaskRemoveFromEventList+0xb8>)
 8004b6e:	f7fe feb6 	bl	80038de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b76:	4b0d      	ldr	r3, [pc, #52]	; (8004bac <xTaskRemoveFromEventList+0xbc>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d905      	bls.n	8004b8c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b80:	2301      	movs	r3, #1
 8004b82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b84:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <xTaskRemoveFromEventList+0xc0>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	e001      	b.n	8004b90 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004b90:	697b      	ldr	r3, [r7, #20]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	200003cc 	.word	0x200003cc
 8004ba0:	200003ac 	.word	0x200003ac
 8004ba4:	200002a8 	.word	0x200002a8
 8004ba8:	20000364 	.word	0x20000364
 8004bac:	200002a4 	.word	0x200002a4
 8004bb0:	200003b8 	.word	0x200003b8

08004bb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bbc:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <vTaskInternalSetTimeOutState+0x24>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004bc4:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <vTaskInternalSetTimeOutState+0x28>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	605a      	str	r2, [r3, #4]
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	200003bc 	.word	0x200003bc
 8004bdc:	200003a8 	.word	0x200003a8

08004be0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d109      	bne.n	8004c04 <xTaskCheckForTimeOut+0x24>
 8004bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	613b      	str	r3, [r7, #16]
 8004c02:	e7fe      	b.n	8004c02 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d109      	bne.n	8004c1e <xTaskCheckForTimeOut+0x3e>
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	e7fe      	b.n	8004c1c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004c1e:	f000 fc4b 	bl	80054b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c22:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <xTaskCheckForTimeOut+0xb8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3a:	d102      	bne.n	8004c42 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e023      	b.n	8004c8a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <xTaskCheckForTimeOut+0xbc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d007      	beq.n	8004c5e <xTaskCheckForTimeOut+0x7e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d302      	bcc.n	8004c5e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	61fb      	str	r3, [r7, #28]
 8004c5c:	e015      	b.n	8004c8a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d20b      	bcs.n	8004c80 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	1ad2      	subs	r2, r2, r3
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff ff9d 	bl	8004bb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61fb      	str	r3, [r7, #28]
 8004c7e:	e004      	b.n	8004c8a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c86:	2301      	movs	r3, #1
 8004c88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c8a:	f000 fc43 	bl	8005514 <vPortExitCritical>

	return xReturn;
 8004c8e:	69fb      	ldr	r3, [r7, #28]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3720      	adds	r7, #32
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	200003a8 	.word	0x200003a8
 8004c9c:	200003bc 	.word	0x200003bc

08004ca0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ca4:	4b03      	ldr	r3, [pc, #12]	; (8004cb4 <vTaskMissedYield+0x14>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
}
 8004caa:	bf00      	nop
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	200003b8 	.word	0x200003b8

08004cb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cc0:	f000 f852 	bl	8004d68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cc4:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <prvIdleTask+0x28>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d9f9      	bls.n	8004cc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <prvIdleTask+0x2c>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cdc:	e7f0      	b.n	8004cc0 <prvIdleTask+0x8>
 8004cde:	bf00      	nop
 8004ce0:	200002a8 	.word	0x200002a8
 8004ce4:	e000ed04 	.word	0xe000ed04

08004ce8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cee:	2300      	movs	r3, #0
 8004cf0:	607b      	str	r3, [r7, #4]
 8004cf2:	e00c      	b.n	8004d0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4a12      	ldr	r2, [pc, #72]	; (8004d48 <prvInitialiseTaskLists+0x60>)
 8004d00:	4413      	add	r3, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe fdc0 	bl	8003888 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b06      	cmp	r3, #6
 8004d12:	d9ef      	bls.n	8004cf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d14:	480d      	ldr	r0, [pc, #52]	; (8004d4c <prvInitialiseTaskLists+0x64>)
 8004d16:	f7fe fdb7 	bl	8003888 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d1a:	480d      	ldr	r0, [pc, #52]	; (8004d50 <prvInitialiseTaskLists+0x68>)
 8004d1c:	f7fe fdb4 	bl	8003888 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d20:	480c      	ldr	r0, [pc, #48]	; (8004d54 <prvInitialiseTaskLists+0x6c>)
 8004d22:	f7fe fdb1 	bl	8003888 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d26:	480c      	ldr	r0, [pc, #48]	; (8004d58 <prvInitialiseTaskLists+0x70>)
 8004d28:	f7fe fdae 	bl	8003888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d2c:	480b      	ldr	r0, [pc, #44]	; (8004d5c <prvInitialiseTaskLists+0x74>)
 8004d2e:	f7fe fdab 	bl	8003888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d32:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <prvInitialiseTaskLists+0x78>)
 8004d34:	4a05      	ldr	r2, [pc, #20]	; (8004d4c <prvInitialiseTaskLists+0x64>)
 8004d36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d38:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <prvInitialiseTaskLists+0x7c>)
 8004d3a:	4a05      	ldr	r2, [pc, #20]	; (8004d50 <prvInitialiseTaskLists+0x68>)
 8004d3c:	601a      	str	r2, [r3, #0]
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	200002a8 	.word	0x200002a8
 8004d4c:	20000334 	.word	0x20000334
 8004d50:	20000348 	.word	0x20000348
 8004d54:	20000364 	.word	0x20000364
 8004d58:	20000378 	.word	0x20000378
 8004d5c:	20000390 	.word	0x20000390
 8004d60:	2000035c 	.word	0x2000035c
 8004d64:	20000360 	.word	0x20000360

08004d68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d6e:	e019      	b.n	8004da4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d70:	f000 fba2 	bl	80054b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004d74:	4b0f      	ldr	r3, [pc, #60]	; (8004db4 <prvCheckTasksWaitingTermination+0x4c>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fe fe07 	bl	8003994 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d86:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <prvCheckTasksWaitingTermination+0x50>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	4a0a      	ldr	r2, [pc, #40]	; (8004db8 <prvCheckTasksWaitingTermination+0x50>)
 8004d8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d90:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <prvCheckTasksWaitingTermination+0x54>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	4a09      	ldr	r2, [pc, #36]	; (8004dbc <prvCheckTasksWaitingTermination+0x54>)
 8004d98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d9a:	f000 fbbb 	bl	8005514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f80e 	bl	8004dc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <prvCheckTasksWaitingTermination+0x54>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e1      	bne.n	8004d70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dac:	bf00      	nop
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20000378 	.word	0x20000378
 8004db8:	200003a4 	.word	0x200003a4
 8004dbc:	2000038c 	.word	0x2000038c

08004dc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d108      	bne.n	8004de4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fcea 	bl	80057b0 <vPortFree>
				vPortFree( pxTCB );
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 fce7 	bl	80057b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004de2:	e017      	b.n	8004e14 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d103      	bne.n	8004df6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fcde 	bl	80057b0 <vPortFree>
	}
 8004df4:	e00e      	b.n	8004e14 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d009      	beq.n	8004e14 <prvDeleteTCB+0x54>
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	e7fe      	b.n	8004e12 <prvDeleteTCB+0x52>
	}
 8004e14:	bf00      	nop
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e22:	4b0e      	ldr	r3, [pc, #56]	; (8004e5c <prvResetNextTaskUnblockTime+0x40>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <prvResetNextTaskUnblockTime+0x14>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <prvResetNextTaskUnblockTime+0x16>
 8004e30:	2300      	movs	r3, #0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d004      	beq.n	8004e40 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e36:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <prvResetNextTaskUnblockTime+0x44>)
 8004e38:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e3e:	e008      	b.n	8004e52 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e40:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <prvResetNextTaskUnblockTime+0x40>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	4a04      	ldr	r2, [pc, #16]	; (8004e60 <prvResetNextTaskUnblockTime+0x44>)
 8004e50:	6013      	str	r3, [r2, #0]
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr
 8004e5c:	2000035c 	.word	0x2000035c
 8004e60:	200003c4 	.word	0x200003c4

08004e64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e6a:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <xTaskGetSchedulerState+0x34>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e72:	2301      	movs	r3, #1
 8004e74:	607b      	str	r3, [r7, #4]
 8004e76:	e008      	b.n	8004e8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e78:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <xTaskGetSchedulerState+0x38>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e80:	2302      	movs	r3, #2
 8004e82:	607b      	str	r3, [r7, #4]
 8004e84:	e001      	b.n	8004e8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e86:	2300      	movs	r3, #0
 8004e88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e8a:	687b      	ldr	r3, [r7, #4]
	}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	200003b0 	.word	0x200003b0
 8004e9c:	200003cc 	.word	0x200003cc

08004ea0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d06e      	beq.n	8004f94 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eba:	4b39      	ldr	r3, [pc, #228]	; (8004fa0 <xTaskPriorityInherit+0x100>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d25e      	bcs.n	8004f82 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	db06      	blt.n	8004eda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ecc:	4b34      	ldr	r3, [pc, #208]	; (8004fa0 <xTaskPriorityInherit+0x100>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	f1c3 0207 	rsb	r2, r3, #7
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	6959      	ldr	r1, [r3, #20]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4a2e      	ldr	r2, [pc, #184]	; (8004fa4 <xTaskPriorityInherit+0x104>)
 8004eec:	4413      	add	r3, r2
 8004eee:	4299      	cmp	r1, r3
 8004ef0:	d101      	bne.n	8004ef6 <xTaskPriorityInherit+0x56>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e000      	b.n	8004ef8 <xTaskPriorityInherit+0x58>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d03a      	beq.n	8004f72 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	3304      	adds	r3, #4
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fe fd47 	bl	8003994 <uxListRemove>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d115      	bne.n	8004f38 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f10:	4924      	ldr	r1, [pc, #144]	; (8004fa4 <xTaskPriorityInherit+0x104>)
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10a      	bne.n	8004f38 <xTaskPriorityInherit+0x98>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	2201      	movs	r2, #1
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43da      	mvns	r2, r3
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <xTaskPriorityInherit+0x108>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4013      	ands	r3, r2
 8004f34:	4a1c      	ldr	r2, [pc, #112]	; (8004fa8 <xTaskPriorityInherit+0x108>)
 8004f36:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f38:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <xTaskPriorityInherit+0x100>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f46:	2201      	movs	r2, #1
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	4b17      	ldr	r3, [pc, #92]	; (8004fa8 <xTaskPriorityInherit+0x108>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	4a15      	ldr	r2, [pc, #84]	; (8004fa8 <xTaskPriorityInherit+0x108>)
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4a10      	ldr	r2, [pc, #64]	; (8004fa4 <xTaskPriorityInherit+0x104>)
 8004f62:	441a      	add	r2, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	3304      	adds	r3, #4
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	f7fe fcb7 	bl	80038de <vListInsertEnd>
 8004f70:	e004      	b.n	8004f7c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f72:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <xTaskPriorityInherit+0x100>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	e008      	b.n	8004f94 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <xTaskPriorityInherit+0x100>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d201      	bcs.n	8004f94 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004f90:	2301      	movs	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f94:	68fb      	ldr	r3, [r7, #12]
	}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	200002a4 	.word	0x200002a4
 8004fa4:	200002a8 	.word	0x200002a8
 8004fa8:	200003ac 	.word	0x200003ac

08004fac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d06c      	beq.n	800509c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fc2:	4b39      	ldr	r3, [pc, #228]	; (80050a8 <xTaskPriorityDisinherit+0xfc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d009      	beq.n	8004fe0 <xTaskPriorityDisinherit+0x34>
 8004fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	e7fe      	b.n	8004fde <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d109      	bne.n	8004ffc <xTaskPriorityDisinherit+0x50>
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	e7fe      	b.n	8004ffa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005000:	1e5a      	subs	r2, r3, #1
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500e:	429a      	cmp	r2, r3
 8005010:	d044      	beq.n	800509c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005016:	2b00      	cmp	r3, #0
 8005018:	d140      	bne.n	800509c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	3304      	adds	r3, #4
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe fcb8 	bl	8003994 <uxListRemove>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d115      	bne.n	8005056 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502e:	491f      	ldr	r1, [pc, #124]	; (80050ac <xTaskPriorityDisinherit+0x100>)
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <xTaskPriorityDisinherit+0xaa>
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	2201      	movs	r2, #1
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	43da      	mvns	r2, r3
 800504c:	4b18      	ldr	r3, [pc, #96]	; (80050b0 <xTaskPriorityDisinherit+0x104>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4013      	ands	r3, r2
 8005052:	4a17      	ldr	r2, [pc, #92]	; (80050b0 <xTaskPriorityDisinherit+0x104>)
 8005054:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	f1c3 0207 	rsb	r2, r3, #7
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506e:	2201      	movs	r2, #1
 8005070:	409a      	lsls	r2, r3
 8005072:	4b0f      	ldr	r3, [pc, #60]	; (80050b0 <xTaskPriorityDisinherit+0x104>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4313      	orrs	r3, r2
 8005078:	4a0d      	ldr	r2, [pc, #52]	; (80050b0 <xTaskPriorityDisinherit+0x104>)
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005080:	4613      	mov	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4a08      	ldr	r2, [pc, #32]	; (80050ac <xTaskPriorityDisinherit+0x100>)
 800508a:	441a      	add	r2, r3
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	3304      	adds	r3, #4
 8005090:	4619      	mov	r1, r3
 8005092:	4610      	mov	r0, r2
 8005094:	f7fe fc23 	bl	80038de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005098:	2301      	movs	r3, #1
 800509a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800509c:	697b      	ldr	r3, [r7, #20]
	}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	200002a4 	.word	0x200002a4
 80050ac:	200002a8 	.word	0x200002a8
 80050b0:	200003ac 	.word	0x200003ac

080050b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80050c2:	2301      	movs	r3, #1
 80050c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 8086 	beq.w	80051da <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <vTaskPriorityDisinheritAfterTimeout+0x36>
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	e7fe      	b.n	80050e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d902      	bls.n	80050fa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	61fb      	str	r3, [r7, #28]
 80050f8:	e002      	b.n	8005100 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	429a      	cmp	r2, r3
 8005108:	d067      	beq.n	80051da <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	429a      	cmp	r2, r3
 8005112:	d162      	bne.n	80051da <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005114:	4b33      	ldr	r3, [pc, #204]	; (80051e4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	429a      	cmp	r2, r3
 800511c:	d109      	bne.n	8005132 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	e7fe      	b.n	8005130 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	db04      	blt.n	8005150 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	f1c3 0207 	rsb	r2, r3, #7
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	6959      	ldr	r1, [r3, #20]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4a22      	ldr	r2, [pc, #136]	; (80051e8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005160:	4413      	add	r3, r2
 8005162:	4299      	cmp	r1, r3
 8005164:	d101      	bne.n	800516a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800516a:	2300      	movs	r3, #0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d034      	beq.n	80051da <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	3304      	adds	r3, #4
 8005174:	4618      	mov	r0, r3
 8005176:	f7fe fc0d 	bl	8003994 <uxListRemove>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d115      	bne.n	80051ac <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005184:	4918      	ldr	r1, [pc, #96]	; (80051e8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005186:	4613      	mov	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	440b      	add	r3, r1
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10a      	bne.n	80051ac <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	2201      	movs	r2, #1
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	43da      	mvns	r2, r3
 80051a2:	4b12      	ldr	r3, [pc, #72]	; (80051ec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4013      	ands	r3, r2
 80051a8:	4a10      	ldr	r2, [pc, #64]	; (80051ec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80051aa:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	2201      	movs	r2, #1
 80051b2:	409a      	lsls	r2, r3
 80051b4:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	4a0c      	ldr	r2, [pc, #48]	; (80051ec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4a07      	ldr	r2, [pc, #28]	; (80051e8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80051cc:	441a      	add	r2, r3
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	3304      	adds	r3, #4
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f7fe fb82 	bl	80038de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051da:	bf00      	nop
 80051dc:	3720      	adds	r7, #32
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	200002a4 	.word	0x200002a4
 80051e8:	200002a8 	.word	0x200002a8
 80051ec:	200003ac 	.word	0x200003ac

080051f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80051f4:	4b07      	ldr	r3, [pc, #28]	; (8005214 <pvTaskIncrementMutexHeldCount+0x24>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80051fc:	4b05      	ldr	r3, [pc, #20]	; (8005214 <pvTaskIncrementMutexHeldCount+0x24>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005202:	3201      	adds	r2, #1
 8005204:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005206:	4b03      	ldr	r3, [pc, #12]	; (8005214 <pvTaskIncrementMutexHeldCount+0x24>)
 8005208:	681b      	ldr	r3, [r3, #0]
	}
 800520a:	4618      	mov	r0, r3
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	200002a4 	.word	0x200002a4

08005218 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005222:	4b29      	ldr	r3, [pc, #164]	; (80052c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005228:	4b28      	ldr	r3, [pc, #160]	; (80052cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3304      	adds	r3, #4
 800522e:	4618      	mov	r0, r3
 8005230:	f7fe fbb0 	bl	8003994 <uxListRemove>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10b      	bne.n	8005252 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800523a:	4b24      	ldr	r3, [pc, #144]	; (80052cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	2201      	movs	r2, #1
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
 8005246:	43da      	mvns	r2, r3
 8005248:	4b21      	ldr	r3, [pc, #132]	; (80052d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4013      	ands	r3, r2
 800524e:	4a20      	ldr	r2, [pc, #128]	; (80052d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005250:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005258:	d10a      	bne.n	8005270 <prvAddCurrentTaskToDelayedList+0x58>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005260:	4b1a      	ldr	r3, [pc, #104]	; (80052cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3304      	adds	r3, #4
 8005266:	4619      	mov	r1, r3
 8005268:	481a      	ldr	r0, [pc, #104]	; (80052d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800526a:	f7fe fb38 	bl	80038de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800526e:	e026      	b.n	80052be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4413      	add	r3, r2
 8005276:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005278:	4b14      	ldr	r3, [pc, #80]	; (80052cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	429a      	cmp	r2, r3
 8005286:	d209      	bcs.n	800529c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005288:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3304      	adds	r3, #4
 8005292:	4619      	mov	r1, r3
 8005294:	4610      	mov	r0, r2
 8005296:	f7fe fb45 	bl	8003924 <vListInsert>
}
 800529a:	e010      	b.n	80052be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800529c:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3304      	adds	r3, #4
 80052a6:	4619      	mov	r1, r3
 80052a8:	4610      	mov	r0, r2
 80052aa:	f7fe fb3b 	bl	8003924 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052ae:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d202      	bcs.n	80052be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80052b8:	4a09      	ldr	r2, [pc, #36]	; (80052e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	6013      	str	r3, [r2, #0]
}
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	200003a8 	.word	0x200003a8
 80052cc:	200002a4 	.word	0x200002a4
 80052d0:	200003ac 	.word	0x200003ac
 80052d4:	20000390 	.word	0x20000390
 80052d8:	20000360 	.word	0x20000360
 80052dc:	2000035c 	.word	0x2000035c
 80052e0:	200003c4 	.word	0x200003c4

080052e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3b04      	subs	r3, #4
 80052f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3b04      	subs	r3, #4
 8005302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f023 0201 	bic.w	r2, r3, #1
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3b04      	subs	r3, #4
 8005312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005314:	4a08      	ldr	r2, [pc, #32]	; (8005338 <pxPortInitialiseStack+0x54>)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3b14      	subs	r3, #20
 800531e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3b20      	subs	r3, #32
 800532a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800532c:	68fb      	ldr	r3, [r7, #12]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr
 8005338:	0800533d 	.word	0x0800533d

0800533c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005342:	2300      	movs	r3, #0
 8005344:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005346:	4b10      	ldr	r3, [pc, #64]	; (8005388 <prvTaskExitError+0x4c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534e:	d009      	beq.n	8005364 <prvTaskExitError+0x28>
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	e7fe      	b.n	8005362 <prvTaskExitError+0x26>
 8005364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005376:	bf00      	nop
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0fc      	beq.n	8005378 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr
 8005388:	20000030 	.word	0x20000030
 800538c:	00000000 	.word	0x00000000

08005390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005390:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <pxCurrentTCBConst2>)
 8005392:	6819      	ldr	r1, [r3, #0]
 8005394:	6808      	ldr	r0, [r1, #0]
 8005396:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800539a:	f380 8809 	msr	PSP, r0
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f04f 0000 	mov.w	r0, #0
 80053a6:	f380 8811 	msr	BASEPRI, r0
 80053aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80053ae:	4770      	bx	lr

080053b0 <pxCurrentTCBConst2>:
 80053b0:	200002a4 	.word	0x200002a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop

080053b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80053b8:	4806      	ldr	r0, [pc, #24]	; (80053d4 <prvPortStartFirstTask+0x1c>)
 80053ba:	6800      	ldr	r0, [r0, #0]
 80053bc:	6800      	ldr	r0, [r0, #0]
 80053be:	f380 8808 	msr	MSP, r0
 80053c2:	b662      	cpsie	i
 80053c4:	b661      	cpsie	f
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	df00      	svc	0
 80053d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053d2:	bf00      	nop
 80053d4:	e000ed08 	.word	0xe000ed08

080053d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053de:	4b31      	ldr	r3, [pc, #196]	; (80054a4 <xPortStartScheduler+0xcc>)
 80053e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	22ff      	movs	r2, #255	; 0xff
 80053ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005400:	b2da      	uxtb	r2, r3
 8005402:	4b29      	ldr	r3, [pc, #164]	; (80054a8 <xPortStartScheduler+0xd0>)
 8005404:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005406:	4b29      	ldr	r3, [pc, #164]	; (80054ac <xPortStartScheduler+0xd4>)
 8005408:	2207      	movs	r2, #7
 800540a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800540c:	e009      	b.n	8005422 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800540e:	4b27      	ldr	r3, [pc, #156]	; (80054ac <xPortStartScheduler+0xd4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3b01      	subs	r3, #1
 8005414:	4a25      	ldr	r2, [pc, #148]	; (80054ac <xPortStartScheduler+0xd4>)
 8005416:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	b2db      	uxtb	r3, r3
 8005420:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542a:	2b80      	cmp	r3, #128	; 0x80
 800542c:	d0ef      	beq.n	800540e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800542e:	4b1f      	ldr	r3, [pc, #124]	; (80054ac <xPortStartScheduler+0xd4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f1c3 0307 	rsb	r3, r3, #7
 8005436:	2b04      	cmp	r3, #4
 8005438:	d009      	beq.n	800544e <xPortStartScheduler+0x76>
 800543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	60bb      	str	r3, [r7, #8]
 800544c:	e7fe      	b.n	800544c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800544e:	4b17      	ldr	r3, [pc, #92]	; (80054ac <xPortStartScheduler+0xd4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	4a15      	ldr	r2, [pc, #84]	; (80054ac <xPortStartScheduler+0xd4>)
 8005456:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005458:	4b14      	ldr	r3, [pc, #80]	; (80054ac <xPortStartScheduler+0xd4>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005460:	4a12      	ldr	r2, [pc, #72]	; (80054ac <xPortStartScheduler+0xd4>)
 8005462:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	b2da      	uxtb	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800546c:	4b10      	ldr	r3, [pc, #64]	; (80054b0 <xPortStartScheduler+0xd8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a0f      	ldr	r2, [pc, #60]	; (80054b0 <xPortStartScheduler+0xd8>)
 8005472:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005476:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005478:	4b0d      	ldr	r3, [pc, #52]	; (80054b0 <xPortStartScheduler+0xd8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a0c      	ldr	r2, [pc, #48]	; (80054b0 <xPortStartScheduler+0xd8>)
 800547e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005482:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005484:	f000 f8b0 	bl	80055e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005488:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <xPortStartScheduler+0xdc>)
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800548e:	f7ff ff93 	bl	80053b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005492:	f7ff faaf 	bl	80049f4 <vTaskSwitchContext>
	prvTaskExitError();
 8005496:	f7ff ff51 	bl	800533c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	e000e400 	.word	0xe000e400
 80054a8:	200003d0 	.word	0x200003d0
 80054ac:	200003d4 	.word	0x200003d4
 80054b0:	e000ed20 	.word	0xe000ed20
 80054b4:	20000030 	.word	0x20000030

080054b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054d0:	4b0e      	ldr	r3, [pc, #56]	; (800550c <vPortEnterCritical+0x54>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3301      	adds	r3, #1
 80054d6:	4a0d      	ldr	r2, [pc, #52]	; (800550c <vPortEnterCritical+0x54>)
 80054d8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054da:	4b0c      	ldr	r3, [pc, #48]	; (800550c <vPortEnterCritical+0x54>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d10e      	bne.n	8005500 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054e2:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <vPortEnterCritical+0x58>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d009      	beq.n	8005500 <vPortEnterCritical+0x48>
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	603b      	str	r3, [r7, #0]
 80054fe:	e7fe      	b.n	80054fe <vPortEnterCritical+0x46>
	}
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	20000030 	.word	0x20000030
 8005510:	e000ed04 	.word	0xe000ed04

08005514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800551a:	4b10      	ldr	r3, [pc, #64]	; (800555c <vPortExitCritical+0x48>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d109      	bne.n	8005536 <vPortExitCritical+0x22>
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	607b      	str	r3, [r7, #4]
 8005534:	e7fe      	b.n	8005534 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005536:	4b09      	ldr	r3, [pc, #36]	; (800555c <vPortExitCritical+0x48>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3b01      	subs	r3, #1
 800553c:	4a07      	ldr	r2, [pc, #28]	; (800555c <vPortExitCritical+0x48>)
 800553e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005540:	4b06      	ldr	r3, [pc, #24]	; (800555c <vPortExitCritical+0x48>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d104      	bne.n	8005552 <vPortExitCritical+0x3e>
 8005548:	2300      	movs	r3, #0
 800554a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr
 800555c:	20000030 	.word	0x20000030

08005560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005560:	f3ef 8009 	mrs	r0, PSP
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	4b0d      	ldr	r3, [pc, #52]	; (80055a0 <pxCurrentTCBConst>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005570:	6010      	str	r0, [r2, #0]
 8005572:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005576:	f04f 0050 	mov.w	r0, #80	; 0x50
 800557a:	f380 8811 	msr	BASEPRI, r0
 800557e:	f7ff fa39 	bl	80049f4 <vTaskSwitchContext>
 8005582:	f04f 0000 	mov.w	r0, #0
 8005586:	f380 8811 	msr	BASEPRI, r0
 800558a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800558e:	6819      	ldr	r1, [r3, #0]
 8005590:	6808      	ldr	r0, [r1, #0]
 8005592:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005596:	f380 8809 	msr	PSP, r0
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	4770      	bx	lr

080055a0 <pxCurrentTCBConst>:
 80055a0:	200002a4 	.word	0x200002a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop

080055a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055c0:	f7ff f95c 	bl	800487c <xTaskIncrementTick>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055ca:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <SysTick_Handler+0x3c>)
 80055cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	2300      	movs	r3, #0
 80055d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80055dc:	bf00      	nop
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	e000ed04 	.word	0xe000ed04

080055e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055ec:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <vPortSetupTimerInterrupt+0x30>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055f2:	4b0a      	ldr	r3, [pc, #40]	; (800561c <vPortSetupTimerInterrupt+0x34>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055f8:	4b09      	ldr	r3, [pc, #36]	; (8005620 <vPortSetupTimerInterrupt+0x38>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a09      	ldr	r2, [pc, #36]	; (8005624 <vPortSetupTimerInterrupt+0x3c>)
 80055fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005602:	099b      	lsrs	r3, r3, #6
 8005604:	4a08      	ldr	r2, [pc, #32]	; (8005628 <vPortSetupTimerInterrupt+0x40>)
 8005606:	3b01      	subs	r3, #1
 8005608:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800560a:	4b03      	ldr	r3, [pc, #12]	; (8005618 <vPortSetupTimerInterrupt+0x30>)
 800560c:	2207      	movs	r2, #7
 800560e:	601a      	str	r2, [r3, #0]
}
 8005610:	bf00      	nop
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr
 8005618:	e000e010 	.word	0xe000e010
 800561c:	e000e018 	.word	0xe000e018
 8005620:	20000024 	.word	0x20000024
 8005624:	10624dd3 	.word	0x10624dd3
 8005628:	e000e014 	.word	0xe000e014

0800562c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08a      	sub	sp, #40	; 0x28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005638:	f7ff f876 	bl	8004728 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800563c:	4b57      	ldr	r3, [pc, #348]	; (800579c <pvPortMalloc+0x170>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005644:	f000 f90c 	bl	8005860 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005648:	4b55      	ldr	r3, [pc, #340]	; (80057a0 <pvPortMalloc+0x174>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4013      	ands	r3, r2
 8005650:	2b00      	cmp	r3, #0
 8005652:	f040 808c 	bne.w	800576e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d01c      	beq.n	8005696 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800565c:	2208      	movs	r2, #8
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4413      	add	r3, r2
 8005662:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	2b00      	cmp	r3, #0
 800566c:	d013      	beq.n	8005696 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f023 0307 	bic.w	r3, r3, #7
 8005674:	3308      	adds	r3, #8
 8005676:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	2b00      	cmp	r3, #0
 8005680:	d009      	beq.n	8005696 <pvPortMalloc+0x6a>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	e7fe      	b.n	8005694 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d068      	beq.n	800576e <pvPortMalloc+0x142>
 800569c:	4b41      	ldr	r3, [pc, #260]	; (80057a4 <pvPortMalloc+0x178>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d863      	bhi.n	800576e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056a6:	4b40      	ldr	r3, [pc, #256]	; (80057a8 <pvPortMalloc+0x17c>)
 80056a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056aa:	4b3f      	ldr	r3, [pc, #252]	; (80057a8 <pvPortMalloc+0x17c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056b0:	e004      	b.n	80056bc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d903      	bls.n	80056ce <pvPortMalloc+0xa2>
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f1      	bne.n	80056b2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056ce:	4b33      	ldr	r3, [pc, #204]	; (800579c <pvPortMalloc+0x170>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d04a      	beq.n	800576e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2208      	movs	r2, #8
 80056de:	4413      	add	r3, r2
 80056e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	1ad2      	subs	r2, r2, r3
 80056f2:	2308      	movs	r3, #8
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d91e      	bls.n	8005738 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4413      	add	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	2b00      	cmp	r3, #0
 800570a:	d009      	beq.n	8005720 <pvPortMalloc+0xf4>
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	613b      	str	r3, [r7, #16]
 800571e:	e7fe      	b.n	800571e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	1ad2      	subs	r2, r2, r3
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005732:	69b8      	ldr	r0, [r7, #24]
 8005734:	f000 f8f6 	bl	8005924 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005738:	4b1a      	ldr	r3, [pc, #104]	; (80057a4 <pvPortMalloc+0x178>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	4a18      	ldr	r2, [pc, #96]	; (80057a4 <pvPortMalloc+0x178>)
 8005744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005746:	4b17      	ldr	r3, [pc, #92]	; (80057a4 <pvPortMalloc+0x178>)
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	4b18      	ldr	r3, [pc, #96]	; (80057ac <pvPortMalloc+0x180>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d203      	bcs.n	800575a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005752:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <pvPortMalloc+0x178>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a15      	ldr	r2, [pc, #84]	; (80057ac <pvPortMalloc+0x180>)
 8005758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <pvPortMalloc+0x174>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	431a      	orrs	r2, r3
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800576e:	f7fe ffe9 	bl	8004744 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	2b00      	cmp	r3, #0
 800577a:	d009      	beq.n	8005790 <pvPortMalloc+0x164>
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	e7fe      	b.n	800578e <pvPortMalloc+0x162>
	return pvReturn;
 8005790:	69fb      	ldr	r3, [r7, #28]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3728      	adds	r7, #40	; 0x28
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000fe0 	.word	0x20000fe0
 80057a0:	20000fec 	.word	0x20000fec
 80057a4:	20000fe4 	.word	0x20000fe4
 80057a8:	20000fd8 	.word	0x20000fd8
 80057ac:	20000fe8 	.word	0x20000fe8

080057b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d046      	beq.n	8005850 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057c2:	2308      	movs	r3, #8
 80057c4:	425b      	negs	r3, r3
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4413      	add	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	4b20      	ldr	r3, [pc, #128]	; (8005858 <vPortFree+0xa8>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4013      	ands	r3, r2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d109      	bne.n	80057f2 <vPortFree+0x42>
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	e7fe      	b.n	80057f0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d009      	beq.n	800580e <vPortFree+0x5e>
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	60bb      	str	r3, [r7, #8]
 800580c:	e7fe      	b.n	800580c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	4b11      	ldr	r3, [pc, #68]	; (8005858 <vPortFree+0xa8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4013      	ands	r3, r2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d019      	beq.n	8005850 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d115      	bne.n	8005850 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <vPortFree+0xa8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	43db      	mvns	r3, r3
 800582e:	401a      	ands	r2, r3
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005834:	f7fe ff78 	bl	8004728 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	4b07      	ldr	r3, [pc, #28]	; (800585c <vPortFree+0xac>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4413      	add	r3, r2
 8005842:	4a06      	ldr	r2, [pc, #24]	; (800585c <vPortFree+0xac>)
 8005844:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005846:	6938      	ldr	r0, [r7, #16]
 8005848:	f000 f86c 	bl	8005924 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800584c:	f7fe ff7a 	bl	8004744 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005850:	bf00      	nop
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	20000fec 	.word	0x20000fec
 800585c:	20000fe4 	.word	0x20000fe4

08005860 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005866:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800586a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800586c:	4b27      	ldr	r3, [pc, #156]	; (800590c <prvHeapInit+0xac>)
 800586e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00c      	beq.n	8005894 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3307      	adds	r3, #7
 800587e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0307 	bic.w	r3, r3, #7
 8005886:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	4a1f      	ldr	r2, [pc, #124]	; (800590c <prvHeapInit+0xac>)
 8005890:	4413      	add	r3, r2
 8005892:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005898:	4a1d      	ldr	r2, [pc, #116]	; (8005910 <prvHeapInit+0xb0>)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800589e:	4b1c      	ldr	r3, [pc, #112]	; (8005910 <prvHeapInit+0xb0>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	4413      	add	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058ac:	2208      	movs	r2, #8
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	1a9b      	subs	r3, r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0307 	bic.w	r3, r3, #7
 80058ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4a15      	ldr	r2, [pc, #84]	; (8005914 <prvHeapInit+0xb4>)
 80058c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058c2:	4b14      	ldr	r3, [pc, #80]	; (8005914 <prvHeapInit+0xb4>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2200      	movs	r2, #0
 80058c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058ca:	4b12      	ldr	r3, [pc, #72]	; (8005914 <prvHeapInit+0xb4>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	1ad2      	subs	r2, r2, r3
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058e0:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <prvHeapInit+0xb4>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	4a0a      	ldr	r2, [pc, #40]	; (8005918 <prvHeapInit+0xb8>)
 80058ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	4a09      	ldr	r2, [pc, #36]	; (800591c <prvHeapInit+0xbc>)
 80058f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058f8:	4b09      	ldr	r3, [pc, #36]	; (8005920 <prvHeapInit+0xc0>)
 80058fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80058fe:	601a      	str	r2, [r3, #0]
}
 8005900:	bf00      	nop
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	bc80      	pop	{r7}
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	200003d8 	.word	0x200003d8
 8005910:	20000fd8 	.word	0x20000fd8
 8005914:	20000fe0 	.word	0x20000fe0
 8005918:	20000fe8 	.word	0x20000fe8
 800591c:	20000fe4 	.word	0x20000fe4
 8005920:	20000fec 	.word	0x20000fec

08005924 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800592c:	4b27      	ldr	r3, [pc, #156]	; (80059cc <prvInsertBlockIntoFreeList+0xa8>)
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	e002      	b.n	8005938 <prvInsertBlockIntoFreeList+0x14>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	429a      	cmp	r2, r3
 8005940:	d8f7      	bhi.n	8005932 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	4413      	add	r3, r2
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	429a      	cmp	r2, r3
 8005952:	d108      	bne.n	8005966 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	441a      	add	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	441a      	add	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d118      	bne.n	80059ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4b14      	ldr	r3, [pc, #80]	; (80059d0 <prvInsertBlockIntoFreeList+0xac>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d00d      	beq.n	80059a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	441a      	add	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	e008      	b.n	80059b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059a2:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <prvInsertBlockIntoFreeList+0xac>)
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	e003      	b.n	80059b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d002      	beq.n	80059c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059c2:	bf00      	nop
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc80      	pop	{r7}
 80059ca:	4770      	bx	lr
 80059cc:	20000fd8 	.word	0x20000fd8
 80059d0:	20000fe0 	.word	0x20000fe0

080059d4 <__libc_init_array>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	2500      	movs	r5, #0
 80059d8:	4e0c      	ldr	r6, [pc, #48]	; (8005a0c <__libc_init_array+0x38>)
 80059da:	4c0d      	ldr	r4, [pc, #52]	; (8005a10 <__libc_init_array+0x3c>)
 80059dc:	1ba4      	subs	r4, r4, r6
 80059de:	10a4      	asrs	r4, r4, #2
 80059e0:	42a5      	cmp	r5, r4
 80059e2:	d109      	bne.n	80059f8 <__libc_init_array+0x24>
 80059e4:	f000 f82e 	bl	8005a44 <_init>
 80059e8:	2500      	movs	r5, #0
 80059ea:	4e0a      	ldr	r6, [pc, #40]	; (8005a14 <__libc_init_array+0x40>)
 80059ec:	4c0a      	ldr	r4, [pc, #40]	; (8005a18 <__libc_init_array+0x44>)
 80059ee:	1ba4      	subs	r4, r4, r6
 80059f0:	10a4      	asrs	r4, r4, #2
 80059f2:	42a5      	cmp	r5, r4
 80059f4:	d105      	bne.n	8005a02 <__libc_init_array+0x2e>
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059fc:	4798      	blx	r3
 80059fe:	3501      	adds	r5, #1
 8005a00:	e7ee      	b.n	80059e0 <__libc_init_array+0xc>
 8005a02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a06:	4798      	blx	r3
 8005a08:	3501      	adds	r5, #1
 8005a0a:	e7f2      	b.n	80059f2 <__libc_init_array+0x1e>
 8005a0c:	08005b30 	.word	0x08005b30
 8005a10:	08005b30 	.word	0x08005b30
 8005a14:	08005b30 	.word	0x08005b30
 8005a18:	08005b34 	.word	0x08005b34

08005a1c <memcpy>:
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	1e43      	subs	r3, r0, #1
 8005a20:	440a      	add	r2, r1
 8005a22:	4291      	cmp	r1, r2
 8005a24:	d100      	bne.n	8005a28 <memcpy+0xc>
 8005a26:	bd10      	pop	{r4, pc}
 8005a28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a30:	e7f7      	b.n	8005a22 <memcpy+0x6>

08005a32 <memset>:
 8005a32:	4603      	mov	r3, r0
 8005a34:	4402      	add	r2, r0
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d100      	bne.n	8005a3c <memset+0xa>
 8005a3a:	4770      	bx	lr
 8005a3c:	f803 1b01 	strb.w	r1, [r3], #1
 8005a40:	e7f9      	b.n	8005a36 <memset+0x4>
	...

08005a44 <_init>:
 8005a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a46:	bf00      	nop
 8005a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a4a:	bc08      	pop	{r3}
 8005a4c:	469e      	mov	lr, r3
 8005a4e:	4770      	bx	lr

08005a50 <_fini>:
 8005a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a52:	bf00      	nop
 8005a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a56:	bc08      	pop	{r3}
 8005a58:	469e      	mov	lr, r3
 8005a5a:	4770      	bx	lr
